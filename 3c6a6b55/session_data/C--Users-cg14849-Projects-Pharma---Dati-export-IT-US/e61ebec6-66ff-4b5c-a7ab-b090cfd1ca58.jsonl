{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":"Leggi @PLAN.md e guarda a come sono stati fatti i plot nella cartella \"plots\". Vorrei riprodurre gli stessi plot in excel così che il mio capo possa aggiungerli alla presentazione in modo più agevole. Per favore salva i dati finali da cui si ottengono i vari plot in un file xlsx (usa un foglio per plot) in modo che siano facile creare i grafici e crea un file md con le istruzioni ESATTE per riprodurre i grafici nel modo più fedele possibile."},"uuid":"d142190b-df5c-47fa-9765-f2ef3eaa6021","timestamp":"2025-08-06T12:36:13.959Z"}
{"parentUuid":"d142190b-df5c-47fa-9765-f2ef3eaa6021","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_012FjtAJN8mWa94sqvBzWmNq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Yes, sir. I'll examine the plots in the `plots/` folder and create Excel-friendly data files with instructions to reproduce the charts."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":19946,"cache_read_input_tokens":0,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRrU1NEosidJaRoCnvK2X","type":"assistant","uuid":"99f12f8c-c3f4-4973-9440-569d8ce82cc7","timestamp":"2025-08-06T12:36:17.924Z"}
{"parentUuid":"99f12f8c-c3f4-4973-9440-569d8ce82cc7","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_012FjtAJN8mWa94sqvBzWmNq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_0124HR1SpjcXHqWMwyjdhBef","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine existing plots to understand chart structure","status":"pending"},{"id":"2","content":"Read data processor scripts to understand data preparation","status":"pending"},{"id":"3","content":"Extract chart data and save to Excel sheets","status":"pending"},{"id":"4","content":"Create detailed Excel chart reproduction instructions","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":19946,"cache_read_input_tokens":0,"output_tokens":191,"service_tier":"standard"}},"requestId":"req_011CRrU1NEosidJaRoCnvK2X","type":"assistant","uuid":"b571a199-10f8-4ccc-ae1c-756b6571448a","timestamp":"2025-08-06T12:36:19.689Z"}
{"parentUuid":"b571a199-10f8-4ccc-ae1c-756b6571448a","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_0124HR1SpjcXHqWMwyjdhBef","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"fa9f523d-2cbb-413f-a006-2c658dc3c58d","timestamp":"2025-08-06T12:36:19.781Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Examine existing plots to understand chart structure","status":"pending","id":"1"},{"content":"Read data processor scripts to understand data preparation","status":"pending","id":"2"},{"content":"Extract chart data and save to Excel sheets","status":"pending","id":"3"},{"content":"Create detailed Excel chart reproduction instructions","status":"pending","id":"4"}]}}
{"parentUuid":"fa9f523d-2cbb-413f-a006-2c658dc3c58d","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_015cfMWTXn8qUqsARkKzVWCK","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01JAbyTBVNW9w3nVc7i4PFXc","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Examine existing plots to understand chart structure","status":"in_progress"},{"id":"2","content":"Read data processor scripts to understand data preparation","status":"pending"},{"id":"3","content":"Extract chart data and save to Excel sheets","status":"pending"},{"id":"4","content":"Create detailed Excel chart reproduction instructions","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":353,"cache_read_input_tokens":19946,"output_tokens":156,"service_tier":"standard"}},"requestId":"req_011CRrU1p4aLpSXueJ83bSfR","type":"assistant","uuid":"d341c2c1-59b3-4cb6-9117-d557ea828bf8","timestamp":"2025-08-06T12:36:23.280Z"}
{"parentUuid":"d341c2c1-59b3-4cb6-9117-d557ea828bf8","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01JAbyTBVNW9w3nVc7i4PFXc","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"6297bb00-3d82-4ee5-9405-7c706a8d518f","timestamp":"2025-08-06T12:36:23.347Z","toolUseResult":{"oldTodos":[{"content":"Examine existing plots to understand chart structure","status":"pending","id":"1"},{"content":"Read data processor scripts to understand data preparation","status":"pending","id":"2"},{"content":"Extract chart data and save to Excel sheets","status":"pending","id":"3"},{"content":"Create detailed Excel chart reproduction instructions","status":"pending","id":"4"}],"newTodos":[{"content":"Examine existing plots to understand chart structure","status":"in_progress","id":"1"},{"content":"Read data processor scripts to understand data preparation","status":"pending","id":"2"},{"content":"Extract chart data and save to Excel sheets","status":"pending","id":"3"},{"content":"Create detailed Excel chart reproduction instructions","status":"pending","id":"4"}]}}
{"parentUuid":"6297bb00-3d82-4ee5-9405-7c706a8d518f","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01KuChbiCnBfLVWLpjMeUrXq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_016rza4ojuBCefeuHxyn8neo","name":"LS","input":{"path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\plots"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":329,"cache_read_input_tokens":20299,"output_tokens":75,"service_tier":"standard"}},"requestId":"req_011CRrU248uiq8of6EF9AjDj","type":"assistant","uuid":"5931f3e5-dbe8-461e-8984-b52b4cfbf39e","timestamp":"2025-08-06T12:36:26.837Z"}
{"parentUuid":"5931f3e5-dbe8-461e-8984-b52b4cfbf39e","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_016rza4ojuBCefeuHxyn8neo","type":"tool_result","content":"- C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\\n  - plots\\\n    - multi_sector_dashboard.png\n    - official_growth_comparison_chart.png\n    - official_market_share_chart.png\n    - official_timeline_chart.png\n    - sector_growth_performance.png\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"1161293d-ef6f-4c62-8abd-f209edd2d982","timestamp":"2025-08-06T12:36:26.894Z","toolUseResult":"- C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\\n  - plots\\\n    - multi_sector_dashboard.png\n    - official_growth_comparison_chart.png\n    - official_market_share_chart.png\n    - official_timeline_chart.png\n    - sector_growth_performance.png\n"}
{"parentUuid":"1161293d-ef6f-4c62-8abd-f209edd2d982","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01XsfHa5fztbu6wD6PGCn57i","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01UrkyzjrgnQSn9b4JPzjrJ8","name":"Read","input":{"file_path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\plots\\official_timeline_chart.png"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":194,"cache_read_input_tokens":20628,"output_tokens":84,"service_tier":"standard"}},"requestId":"req_011CRrU2KTuTvfbrVvVNULMz","type":"assistant","uuid":"c4ba510d-15f2-4c4e-9c8c-e065b9fb1106","timestamp":"2025-08-06T12:36:30.521Z"}
{"parentUuid":"c4ba510d-15f2-4c4e-9c8c-e065b9fb1106","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UrkyzjrgnQSn9b4JPzjrJ8","type":"tool_result","content":[{"type":"image","source":{"type":"base64","data":"","media_type":"image/png"}}]}]},"uuid":"732ecf9c-0c84-4c31-b901-12e459b4a290","timestamp":"2025-08-06T12:36:32.684Z","toolUseResult":{"type":"image","file":{"base64":"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","type":"image/png","originalSize":261007}}}
{"parentUuid":"732ecf9c-0c84-4c31-b901-12e459b4a290","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"system","content":"PostToolUse:Read hook execution cancelled","isMeta":false,"timestamp":"2025-08-06T12:36:32.686Z","uuid":"5d24e4c1-2815-4503-929f-d8d59253ac94","toolUseID":"toolu_01UrkyzjrgnQSn9b4JPzjrJ8","level":"warning"}
{"parentUuid":"5d24e4c1-2815-4503-929f-d8d59253ac94","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"type":"text","text":"[Request interrupted by user for tool use]"}]},"uuid":"0416f16f-6a1a-46cd-a37f-c39792769030","timestamp":"2025-08-06T12:36:32.769Z"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":"Leggi @PLAN.md e guarda a come sono stati fatti i plot nella cartella \"plots\". Vorrei riprodurre gli stessi plot in excel così che il mio capo possa aggiungerli alla presentazione in modo più agevole. Per favore salva i dati finali da cui si ottengono i vari plot in un file xlsx (usa un foglio per plot) in modo che siano facile creare i grafici e crea un file md con le istruzioni ESATTE per riprodurre i grafici nel modo più fedele possibile. Le istruzioni devono essere in italiano dato che ho installato la versione di excel in italiano"},"uuid":"b8c33dde-5e65-491a-91ce-b7d2b447efa1","timestamp":"2025-08-06T12:37:44.933Z"}
{"parentUuid":"b8c33dde-5e65-491a-91ce-b7d2b447efa1","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01K7SZHxyRY6uxVkJZpHNcyp","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Yes, sir."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":5465,"cache_read_input_tokens":14364,"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CRrU84hoodKvz1dS8opyY","type":"assistant","uuid":"edbf443e-42fe-4724-8936-3094bd5f2f43","timestamp":"2025-08-06T12:37:47.906Z"}
{"parentUuid":"edbf443e-42fe-4724-8936-3094bd5f2f43","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01K7SZHxyRY6uxVkJZpHNcyp","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01UzWuXu3tzHp4BwdBjB4ufy","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze existing plots in plots/ folder to understand data structure","status":"pending"},{"id":"2","content":"Extract data from Python scripts to understand chart data sources","status":"pending"},{"id":"3","content":"Create Excel file with separate sheets for each plot's data","status":"pending"},{"id":"4","content":"Create Italian instructions file for recreating charts in Excel","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":5465,"cache_read_input_tokens":14364,"output_tokens":178,"service_tier":"standard"}},"requestId":"req_011CRrU84hoodKvz1dS8opyY","type":"assistant","uuid":"44d969fe-8015-43c7-927b-f9bcd25f6939","timestamp":"2025-08-06T12:37:50.075Z"}
{"parentUuid":"44d969fe-8015-43c7-927b-f9bcd25f6939","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UzWuXu3tzHp4BwdBjB4ufy","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"0112d1a0-c41d-4abf-a99b-02a12fc2db97","timestamp":"2025-08-06T12:37:50.173Z","toolUseResult":{"oldTodos":[{"content":"Examine existing plots to understand chart structure","status":"in_progress","id":"1"},{"content":"Read data processor scripts to understand data preparation","status":"pending","id":"2"},{"content":"Extract chart data and save to Excel sheets","status":"pending","id":"3"},{"content":"Create detailed Excel chart reproduction instructions","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"pending","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"pending","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"pending","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"pending","id":"4"}]}}
{"parentUuid":"0112d1a0-c41d-4abf-a99b-02a12fc2db97","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01MvdoGqovG33F2jdMGafegf","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_013sC2qxJxiDkNzvBjAwnGLi","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze existing plots in plots/ folder to understand data structure","status":"in_progress"},{"id":"2","content":"Extract data from Python scripts to understand chart data sources","status":"pending"},{"id":"3","content":"Create Excel file with separate sheets for each plot's data","status":"pending"},{"id":"4","content":"Create Italian instructions file for recreating charts in Excel","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":353,"cache_read_input_tokens":19829,"output_tokens":169,"service_tier":"standard"}},"requestId":"req_011CRrU8UaFgJvZGpmYiM7PS","type":"assistant","uuid":"890c1f9e-1c96-4941-9dd2-9cf6e4e52df6","timestamp":"2025-08-06T12:37:53.939Z"}
{"parentUuid":"890c1f9e-1c96-4941-9dd2-9cf6e4e52df6","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013sC2qxJxiDkNzvBjAwnGLi","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"f8e37562-7a9a-4a83-8333-c9d3bcab0152","timestamp":"2025-08-06T12:37:54.061Z","toolUseResult":{"oldTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"pending","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"pending","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"pending","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"in_progress","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"pending","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"pending","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"pending","id":"4"}]}}
{"parentUuid":"f8e37562-7a9a-4a83-8333-c9d3bcab0152","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01JiQKj5UkXT2u6QSJ8Ydde5","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01BG3674Kmfn77xfxrJ6jnUW","name":"LS","input":{"path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\plots"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":355,"cache_read_input_tokens":20182,"output_tokens":75,"service_tier":"standard"}},"requestId":"req_011CRrU8mT1XF65aHsMZzJAK","type":"assistant","uuid":"85388453-043a-4026-89d6-f0cdc6e9797f","timestamp":"2025-08-06T12:37:57.144Z"}
{"parentUuid":"85388453-043a-4026-89d6-f0cdc6e9797f","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01BG3674Kmfn77xfxrJ6jnUW","type":"tool_result","content":"- C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\\n  - plots\\\n    - multi_sector_dashboard.png\n    - official_growth_comparison_chart.png\n    - official_market_share_chart.png\n    - official_timeline_chart.png\n    - sector_growth_performance.png\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"783d789c-fe47-479c-8f2c-bddaeccbcb77","timestamp":"2025-08-06T12:37:57.272Z","toolUseResult":"- C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\\n  - plots\\\n    - multi_sector_dashboard.png\n    - official_growth_comparison_chart.png\n    - official_market_share_chart.png\n    - official_timeline_chart.png\n    - sector_growth_performance.png\n"}
{"parentUuid":"783d789c-fe47-479c-8f2c-bddaeccbcb77","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_0116d2q26kpWBXTVERm3Y3Uf","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01HZAfHYgZzNdzHuVmidZ3Ei","name":"Read","input":{"file_path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\data_processor.py"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":194,"cache_read_input_tokens":20537,"output_tokens":43,"service_tier":"standard"}},"requestId":"req_011CRrU92kGRGveZ7Y9hBjJ9","type":"assistant","uuid":"98994d54-b1ca-4a02-b33b-f3c4f887cfb0","timestamp":"2025-08-06T12:38:01.826Z"}
{"parentUuid":"98994d54-b1ca-4a02-b33b-f3c4f887cfb0","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_0116d2q26kpWBXTVERm3Y3Uf","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01VMbLojdBSnEEY9qPzUW7pT","name":"Read","input":{"file_path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\multi_sector_analyzer.py"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":194,"cache_read_input_tokens":20537,"output_tokens":145,"service_tier":"standard"}},"requestId":"req_011CRrU92kGRGveZ7Y9hBjJ9","type":"assistant","uuid":"dc8fe832-2224-426b-abc2-ac49c6771988","timestamp":"2025-08-06T12:38:01.951Z"}
{"parentUuid":"dc8fe832-2224-426b-abc2-ac49c6771988","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HZAfHYgZzNdzHuVmidZ3Ei","type":"tool_result","content":"     1→import pandas as pd\n     2→import matplotlib.pyplot as plt\n     3→import numpy as np\n     4→from datetime import datetime\n     5→import warnings\n     6→warnings.filterwarnings('ignore')\n     7→\n     8→# Set Italian color scheme\n     9→ITALY_GREEN = '#009246'\n    10→ITALY_WHITE = '#FFFFFF'\n    11→ITALY_RED = '#CE2B37'\n    12→USA_BLUE = '#002868'\n    13→\n    14→plt.style.use('default')\n    15→plt.rcParams['figure.figsize'] = (12, 8)\n    16→plt.rcParams['font.size'] = 11\n    17→\n    18→def load_and_process_data():\n    19→    \"\"\"Load and process the pharmaceutical export data\"\"\"\n    20→    df = pd.read_csv('data/ita_export_usa_world_historical_series.csv')\n    21→    \n    22→    # Clean and process the data\n    23→    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    24→    df['year'] = df['TIME_PERIOD'].dt.year\n    25→    df['month'] = df['TIME_PERIOD'].dt.month\n    26→    df['value_millions'] = df['OBS_VALUE'] / 1_000_000\n    27→    \n    28→    # Separate USA and World data (include all data including 2025)\n    29→    usa_data_all = df[df['PARTNER'].str.contains('United States', na=False)].copy()\n    30→    world_data_all = df[df['PARTNER'].str.contains('All countries', na=False)].copy()\n    31→    \n    32→    # Sort by date\n    33→    usa_data_all = usa_data_all.sort_values('TIME_PERIOD')\n    34→    world_data_all = world_data_all.sort_values('TIME_PERIOD')\n    35→    \n    36→    # Create complete data versions (exclude 2025 for statistics calculations)\n    37→    usa_data_complete = usa_data_all[usa_data_all['year'] <= 2024].copy()\n    38→    world_data_complete = world_data_all[world_data_all['year'] <= 2024].copy()\n    39→    \n    40→    return df, usa_data_complete, world_data_complete, usa_data_all, world_data_all\n    41→\n    42→def calculate_market_share(usa_data, world_data):\n    43→    \"\"\"Calculate USA market share over time\"\"\"\n    44→    merged = pd.merge(usa_data[['TIME_PERIOD', 'value_millions']], \n    45→                      world_data[['TIME_PERIOD', 'value_millions']], \n    46→                      on='TIME_PERIOD', suffixes=('_usa', '_world'))\n    47→    merged['usa_share'] = (merged['value_millions_usa'] / merged['value_millions_world']) * 100\n    48→    return merged\n    49→\n    50→\n    51→def calculate_annual_data(usa_data, world_data):\n    52→    \"\"\"Calculate annual aggregated data\"\"\"\n    53→    usa_annual = usa_data.groupby('year')['value_millions'].sum().reset_index()\n    54→    world_annual = world_data.groupby('year')['value_millions'].sum().reset_index()\n    55→    \n    56→    annual_merged = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    57→    annual_merged['usa_share'] = (annual_merged['value_millions_usa'] / annual_merged['value_millions_world']) * 100\n    58→    annual_merged['rest_world'] = annual_merged['value_millions_world'] - annual_merged['value_millions_usa']\n    59→    \n    60→    return annual_merged\n    61→\n    62→def generate_timeline_chart(usa_data_all, world_data_all):\n    63→    \"\"\"Generate timeline comparison chart with annual data indexed to 2016\"\"\"\n    64→    fig, ax1 = plt.subplots(figsize=(14, 8))\n    65→    \n    66→    # Calculate annual data excluding 2025\n    67→    usa_annual = usa_data_all[usa_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    68→    world_annual = world_data_all[world_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    69→    \n    70→    # Skip 2025 data - ignore incomplete year\n    71→    \n    72→    # Index to 2016 (set 2016 = 100)\n    73→    usa_2016_value = usa_annual[usa_annual['year'] == 2016]['value_millions'].values[0]\n    74→    world_2016_value = world_annual[world_annual['year'] == 2016]['value_millions'].values[0]\n    75→    \n    76→    usa_annual['indexed'] = (usa_annual['value_millions'] / usa_2016_value) * 100\n    77→    world_annual['indexed'] = (world_annual['value_millions'] / world_2016_value) * 100\n    78→    \n    79→    # Both exports on same axis - annual indexed data\n    80→    ax1.plot(usa_annual['year'], usa_annual['indexed'], \n    81→             color=USA_BLUE, linewidth=2.5, label='USA Exports (2016 = 100)', marker='o')\n    82→    ax1.plot(world_annual['year'], world_annual['indexed'], \n    83→             color=ITALY_GREEN, linewidth=2.5, label='World Total Exports (2016 = 100)', marker='s')\n    84→    ax1.set_xlabel('Year', fontsize=12)\n    85→    ax1.set_ylabel('Export Index (2016 = 100)', fontsize=12)\n    86→    ax1.grid(True, alpha=0.3)\n    87→    \n    88→    # Mark political periods\n    89→    ax1.axvspan(2017, 2021, alpha=0.1, color=ITALY_RED, label='Trump')\n    90→    \n    91→    plt.title('Italian Pharmaceutical Exports: USA vs World Total\\n(Annual Data Indexed to 2016, 2002-2024)', \n    92→              fontsize=16, fontweight='bold', pad=20)\n    93→    \n    94→    # Add legend\n    95→    ax1.legend(loc='upper left')\n    96→    \n    97→    plt.tight_layout()\n    98→    plt.savefig('plots/official_timeline_chart.png', dpi=300, bbox_inches='tight')\n    99→    plt.show()\n   100→    \n   101→    print(\"Timeline chart saved as 'plots/official_timeline_chart.png'\")\n   102→\n   103→def generate_market_share_chart(usa_data_all, world_data_all):\n   104→    \"\"\"Generate USA market share evolution chart with annual data\"\"\"\n   105→    plt.figure(figsize=(14, 8))\n   106→    \n   107→    # Calculate annual market share excluding 2025\n   108→    usa_annual = usa_data_all[usa_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n   109→    world_annual = world_data_all[world_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n   110→    \n   111→    # Skip 2025 data - ignore incomplete year\n   112→    \n   113→    # Calculate annual market share\n   114→    annual_merged = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n   115→    annual_merged['usa_share'] = (annual_merged['value_millions_usa'] / annual_merged['value_millions_world']) * 100\n   116→    \n   117→    plt.fill_between(annual_merged['year'], annual_merged['usa_share'], \n   118→                     alpha=0.3, color=USA_BLUE)\n   119→    plt.plot(annual_merged['year'], annual_merged['usa_share'], \n   120→             color=USA_BLUE, linewidth=2.5, marker='o')\n   121→    \n   122→    # Mark political periods\n   123→    plt.axvspan(2017, 2021, alpha=0.1, color=ITALY_RED, label='Trump')\n   124→    \n   125→    plt.title('USA Share of Italian Pharmaceutical Exports\\n(Annual Data 2002-2024)', \n   126→              fontsize=16, fontweight='bold', pad=20)\n   127→    plt.xlabel('Year', fontsize=12)\n   128→    plt.ylabel('USA Market Share (%)', fontsize=12)\n   129→    plt.grid(True, alpha=0.3)\n   130→    plt.legend()\n   131→    \n   132→    # Add average line (using complete years data 2002-2024 for average)\n   133→    complete_data = annual_merged[annual_merged['year'] <= 2024]\n   134→    avg_share = complete_data['usa_share'].mean()\n   135→    plt.axhline(y=avg_share, color=ITALY_RED, linestyle='--', alpha=0.7, \n   136→                label=f'Average: {avg_share:.1f}%')\n   137→    plt.legend()\n   138→    \n   139→    plt.tight_layout()\n   140→    plt.savefig('plots/official_market_share_chart.png', dpi=300, bbox_inches='tight')\n   141→    plt.show()\n   142→    \n   143→    print(\"Market share chart saved as 'plots/official_market_share_chart.png'\")\n   144→\n   145→def generate_growth_comparison_chart(annual_data):\n   146→    \"\"\"Generate annual growth rate comparison\"\"\"\n   147→    # Calculate growth rates\n   148→    annual_data['usa_growth'] = annual_data['value_millions_usa'].pct_change() * 100\n   149→    annual_data['world_growth'] = annual_data['value_millions_world'].pct_change() * 100\n   150→    annual_data['rest_world_growth'] = annual_data['rest_world'].pct_change() * 100\n   151→    \n   152→    # Filter for years with data\n   153→    growth_data = annual_data[annual_data['year'] >= 2003].copy()\n   154→    \n   155→    fig, ax = plt.subplots(figsize=(14, 8))\n   156→    \n   157→    x = np.arange(len(growth_data))\n   158→    width = 0.25\n   159→    \n   160→    bars1 = ax.bar(x - width/2, growth_data['usa_growth'], width, \n   161→                   label='USA', color=USA_BLUE, alpha=0.8)\n   162→    bars2 = ax.bar(x + width/2, growth_data['rest_world_growth'], width, \n   163→                   label='Rest of World', color=ITALY_RED, alpha=0.8)\n   164→    \n   165→    ax.set_xlabel('Year', fontsize=12)\n   166→    ax.set_ylabel('Annual Growth Rate (%)', fontsize=12)\n   167→    ax.set_title('Italian Pharmaceutical Export Growth Rates\\n(Year-over-Year % Change 2003-2024)', \n   168→                 fontsize=16, fontweight='bold', pad=20)\n   169→    ax.set_xticks(x)\n   170→    ax.set_xticklabels(growth_data['year'], rotation=45)\n   171→    ax.legend()\n   172→    ax.grid(True, alpha=0.3, axis='y')\n   173→    ax.axhline(y=0, color='black', linestyle='-', alpha=0.5)\n   174→    \n   175→    plt.tight_layout()\n   176→    plt.savefig('plots/official_growth_comparison_chart.png', dpi=300, bbox_inches='tight')\n   177→    plt.show()\n   178→    \n   179→    print(\"Growth comparison chart saved as 'plots/official_growth_comparison_chart.png'\")\n   180→\n   181→def validate_against_reference_data(usa_data, world_data):\n   182→    \"\"\"Validate data against provided reference figures\"\"\"\n   183→    print(\"\\n\" + \"=\"*60)\n   184→    print(\"DATA VALIDATION AGAINST 2024 REFERENCE FIGURES\")\n   185→    print(\"=\"*60)\n   186→    \n   187→    # Reference data (provided by user)\n   188→    ref_pharma_world_2024 = 52.866438641  # EUR billion\n   189→    ref_pharma_usa_2024 = 9.987524344    # EUR billion\n   190→    ref_total_world_2024 = 623.508676156  # EUR billion  \n   191→    ref_total_usa_2024 = 64.759446832     # EUR billion\n   192→    \n   193→    # Our 2024 data\n   194→    usa_2024 = usa_data[usa_data['year'] == 2024]['value_millions'].sum() / 1000  # Convert to billions\n   195→    world_2024 = world_data[world_data['year'] == 2024]['value_millions'].sum() / 1000  # Convert to billions\n   196→    \n   197→    print(f\"\\nPHARMACEUTICAL EXPORTS 2024 VALIDATION:\")\n   198→    print(f\"   • Reference USA: €{ref_pharma_usa_2024:.2f}B\")\n   199→    print(f\"   • Our Data USA: €{usa_2024:.2f}B\")\n   200→    print(f\"   • Difference: €{abs(ref_pharma_usa_2024 - usa_2024):.3f}B\")\n   201→    \n   202→    print(f\"\\n   • Reference World: €{ref_pharma_world_2024:.2f}B\") \n   203→    print(f\"   • Our Data World: €{world_2024:.2f}B\")\n   204→    print(f\"   • Difference: €{abs(ref_pharma_world_2024 - world_2024):.3f}B\")\n   205→    \n   206→    print(f\"\\nMARKET SHARE VALIDATION:\")\n   207→    ref_pharma_world_share = (ref_pharma_usa_2024 / ref_pharma_world_2024) * 100\n   208→    our_pharma_world_share = (usa_2024 / world_2024) * 100 if world_2024 > 0 else 0\n   209→    print(f\"   • Reference USA/World pharma share: {ref_pharma_world_share:.2f}%\")\n   210→    print(f\"   • Our calculated pharma share: {our_pharma_world_share:.2f}%\")\n   211→    \n   212→    ref_usa_total_share = (ref_pharma_usa_2024 / ref_total_usa_2024) * 100  \n   213→    print(f\"   • Reference pharma/total USA exports: {ref_usa_total_share:.2f}%\")\n   214→    \n   215→    print(\"\\nVALIDATION RESULT: Pharmaceutical dataset matches reference figures exactly\")\n   216→    print(\"=\"*60)\n   217→\n   218→\n   219→\n   220→\n   221→def print_key_statistics(usa_data, world_data, market_share_data, annual_data):\n   222→    \"\"\"Print key statistics for presentation\"\"\"\n   223→    print(\"\\n\" + \"=\"*60)\n   224→    print(\"KEY STATISTICS FOR PRESENTATION\")\n   225→    print(\"=\"*60)\n   226→    \n   227→    # Current market size\n   228→    recent_usa = usa_data[usa_data['year'] >= 2020]['value_millions'].mean() * 12\n   229→    recent_world = world_data[world_data['year'] >= 2020]['value_millions'].mean() * 12\n   230→    usa_share_recent = (recent_usa / recent_world) * 100\n   231→    \n   232→    print(f\"\\nMARKET SIZE (2020-2024 Average):\")\n   233→    print(f\"   • USA Market: €{recent_usa/1000:.1f} billion annually\")\n   234→    print(f\"   • World Total: €{recent_world/1000:.1f} billion annually\")\n   235→    print(f\"   • USA Share: {usa_share_recent:.1f}% of total Italian pharma exports\")\n   236→    \n   237→    # Growth trends\n   238→    growth_2019_2024_usa = ((usa_data[usa_data['year'] == 2024]['value_millions'].sum() / \n   239→                            usa_data[usa_data['year'] == 2019]['value_millions'].sum()) - 1) * 100\n   240→    growth_2019_2024_world = ((world_data[world_data['year'] == 2024]['value_millions'].sum() / \n   241→                              world_data[world_data['year'] == 2019]['value_millions'].sum()) - 1) * 100\n   242→    \n   243→    print(f\"\\nGROWTH TRENDS (2019-2024):\")\n   244→    print(f\"   • USA Market Growth: +{growth_2019_2024_usa:.1f}%\")\n   245→    print(f\"   • World Market Growth: +{growth_2019_2024_world:.1f}%\")\n   246→    print(f\"   • USA outpacing world by: {growth_2019_2024_usa - growth_2019_2024_world:.1f} percentage points\")\n   247→    \n   248→    # Political period analysis\n   249→    trump1_avg = usa_data[(usa_data['year'] >= 2017) & (usa_data['year'] <= 2020)]['value_millions'].mean()\n   250→    biden_avg = usa_data[(usa_data['year'] >= 2021) & (usa_data['year'] <= 2024)]['value_millions'].mean()\n   251→    \n   252→    print(f\"\\nPOLITICAL PERIOD COMPARISON:\")\n   253→    print(f\"   • Trump 1.0 (2017-2020): €{trump1_avg:.0f}M monthly average\")\n   254→    print(f\"   • Biden (2021-2024): €{biden_avg:.0f}M monthly average\")\n   255→    print(f\"   • Biden era growth: +{((biden_avg/trump1_avg)-1)*100:.1f}%\")\n   256→    \n   257→    # Risk assessment\n   258→    max_monthly = usa_data['value_millions'].max()\n   259→    volatility = usa_data['value_millions'].std()\n   260→    \n   261→    print(f\"\\nRISK FACTORS:\")\n   262→    print(f\"   • Peak monthly export: €{max_monthly:.0f}M\")\n   263→    print(f\"   • Monthly volatility: ±€{volatility:.0f}M (std dev)\")\n   264→    print(f\"   • At 10% tariff impact: ~€{recent_usa * 0.1 / 1000:.1f}B annual revenue at risk\")\n   265→    print(f\"   • At 20% tariff impact: ~€{recent_usa * 0.2 / 1000:.1f}B annual revenue at risk\")\n   266→    \n   267→    print(f\"\\nKEY INSIGHTS:\")\n   268→    print(f\"   • USA is Italy's {usa_share_recent:.0f}% pharmaceutical export market\")\n   269→    print(f\"   • Strong growth momentum even during political uncertainty\")\n   270→    print(f\"   • High absolute values mean significant revenue exposure to policy changes\")\n   271→    print(f\"   • Seasonal patterns suggest consistent pharmaceutical demand\")\n   272→    \n   273→    print(\"\\n\" + \"=\"*60)\n   274→\n   275→if __name__ == \"__main__\":\n   276→    print(\"Loading and processing Italian pharmaceutical export data...\")\n   277→    \n   278→    # Load data\n   279→    df, usa_data, world_data, usa_data_all, world_data_all = load_and_process_data()\n   280→    market_share_data = calculate_market_share(usa_data, world_data)\n   281→    market_share_data_all = calculate_market_share(usa_data_all, world_data_all)\n   282→    annual_data = calculate_annual_data(usa_data, world_data)\n   283→    \n   284→    print(f\"Data loaded: {len(df)} records from {df['TIME_PERIOD'].min().strftime('%Y-%m')} to {df['TIME_PERIOD'].max().strftime('%Y-%m')}\")\n   285→    \n   286→    # Generate all visualizations\n   287→    print(\"\\nGenerating visualizations...\")\n   288→    \n   289→    generate_timeline_chart(usa_data_all, world_data_all)\n   290→    generate_market_share_chart(usa_data_all, world_data_all)\n   291→    generate_growth_comparison_chart(annual_data)\n   292→    \n   293→    # Validate against reference data first\n   294→    validate_against_reference_data(usa_data, world_data)\n   295→    \n   296→    # Print statistics\n   297→    print_key_statistics(usa_data, world_data, market_share_data, annual_data)\n   298→    \n   299→    print(\"\\nAll visualizations completed!\")\n   300→    print(\"Files created:\")\n   301→    print(\"   • plots/official_timeline_chart.png\")\n   302→    print(\"   • plots/official_market_share_chart.png\") \n   303→    print(\"   • plots/official_growth_comparison_chart.png\")\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"5edb52ee-9591-4013-902e-6bc207e3a3b0","timestamp":"2025-08-06T12:38:02.093Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\data_processor.py","content":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Set Italian color scheme\nITALY_GREEN = '#009246'\nITALY_WHITE = '#FFFFFF'\nITALY_RED = '#CE2B37'\nUSA_BLUE = '#002868'\n\nplt.style.use('default')\nplt.rcParams['figure.figsize'] = (12, 8)\nplt.rcParams['font.size'] = 11\n\ndef load_and_process_data():\n    \"\"\"Load and process the pharmaceutical export data\"\"\"\n    df = pd.read_csv('data/ita_export_usa_world_historical_series.csv')\n    \n    # Clean and process the data\n    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    df['year'] = df['TIME_PERIOD'].dt.year\n    df['month'] = df['TIME_PERIOD'].dt.month\n    df['value_millions'] = df['OBS_VALUE'] / 1_000_000\n    \n    # Separate USA and World data (include all data including 2025)\n    usa_data_all = df[df['PARTNER'].str.contains('United States', na=False)].copy()\n    world_data_all = df[df['PARTNER'].str.contains('All countries', na=False)].copy()\n    \n    # Sort by date\n    usa_data_all = usa_data_all.sort_values('TIME_PERIOD')\n    world_data_all = world_data_all.sort_values('TIME_PERIOD')\n    \n    # Create complete data versions (exclude 2025 for statistics calculations)\n    usa_data_complete = usa_data_all[usa_data_all['year'] <= 2024].copy()\n    world_data_complete = world_data_all[world_data_all['year'] <= 2024].copy()\n    \n    return df, usa_data_complete, world_data_complete, usa_data_all, world_data_all\n\ndef calculate_market_share(usa_data, world_data):\n    \"\"\"Calculate USA market share over time\"\"\"\n    merged = pd.merge(usa_data[['TIME_PERIOD', 'value_millions']], \n                      world_data[['TIME_PERIOD', 'value_millions']], \n                      on='TIME_PERIOD', suffixes=('_usa', '_world'))\n    merged['usa_share'] = (merged['value_millions_usa'] / merged['value_millions_world']) * 100\n    return merged\n\n\ndef calculate_annual_data(usa_data, world_data):\n    \"\"\"Calculate annual aggregated data\"\"\"\n    usa_annual = usa_data.groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data.groupby('year')['value_millions'].sum().reset_index()\n    \n    annual_merged = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    annual_merged['usa_share'] = (annual_merged['value_millions_usa'] / annual_merged['value_millions_world']) * 100\n    annual_merged['rest_world'] = annual_merged['value_millions_world'] - annual_merged['value_millions_usa']\n    \n    return annual_merged\n\ndef generate_timeline_chart(usa_data_all, world_data_all):\n    \"\"\"Generate timeline comparison chart with annual data indexed to 2016\"\"\"\n    fig, ax1 = plt.subplots(figsize=(14, 8))\n    \n    # Calculate annual data excluding 2025\n    usa_annual = usa_data_all[usa_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data_all[world_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    # Skip 2025 data - ignore incomplete year\n    \n    # Index to 2016 (set 2016 = 100)\n    usa_2016_value = usa_annual[usa_annual['year'] == 2016]['value_millions'].values[0]\n    world_2016_value = world_annual[world_annual['year'] == 2016]['value_millions'].values[0]\n    \n    usa_annual['indexed'] = (usa_annual['value_millions'] / usa_2016_value) * 100\n    world_annual['indexed'] = (world_annual['value_millions'] / world_2016_value) * 100\n    \n    # Both exports on same axis - annual indexed data\n    ax1.plot(usa_annual['year'], usa_annual['indexed'], \n             color=USA_BLUE, linewidth=2.5, label='USA Exports (2016 = 100)', marker='o')\n    ax1.plot(world_annual['year'], world_annual['indexed'], \n             color=ITALY_GREEN, linewidth=2.5, label='World Total Exports (2016 = 100)', marker='s')\n    ax1.set_xlabel('Year', fontsize=12)\n    ax1.set_ylabel('Export Index (2016 = 100)', fontsize=12)\n    ax1.grid(True, alpha=0.3)\n    \n    # Mark political periods\n    ax1.axvspan(2017, 2021, alpha=0.1, color=ITALY_RED, label='Trump')\n    \n    plt.title('Italian Pharmaceutical Exports: USA vs World Total\\n(Annual Data Indexed to 2016, 2002-2024)', \n              fontsize=16, fontweight='bold', pad=20)\n    \n    # Add legend\n    ax1.legend(loc='upper left')\n    \n    plt.tight_layout()\n    plt.savefig('plots/official_timeline_chart.png', dpi=300, bbox_inches='tight')\n    plt.show()\n    \n    print(\"Timeline chart saved as 'plots/official_timeline_chart.png'\")\n\ndef generate_market_share_chart(usa_data_all, world_data_all):\n    \"\"\"Generate USA market share evolution chart with annual data\"\"\"\n    plt.figure(figsize=(14, 8))\n    \n    # Calculate annual market share excluding 2025\n    usa_annual = usa_data_all[usa_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data_all[world_data_all['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    # Skip 2025 data - ignore incomplete year\n    \n    # Calculate annual market share\n    annual_merged = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    annual_merged['usa_share'] = (annual_merged['value_millions_usa'] / annual_merged['value_millions_world']) * 100\n    \n    plt.fill_between(annual_merged['year'], annual_merged['usa_share'], \n                     alpha=0.3, color=USA_BLUE)\n    plt.plot(annual_merged['year'], annual_merged['usa_share'], \n             color=USA_BLUE, linewidth=2.5, marker='o')\n    \n    # Mark political periods\n    plt.axvspan(2017, 2021, alpha=0.1, color=ITALY_RED, label='Trump')\n    \n    plt.title('USA Share of Italian Pharmaceutical Exports\\n(Annual Data 2002-2024)', \n              fontsize=16, fontweight='bold', pad=20)\n    plt.xlabel('Year', fontsize=12)\n    plt.ylabel('USA Market Share (%)', fontsize=12)\n    plt.grid(True, alpha=0.3)\n    plt.legend()\n    \n    # Add average line (using complete years data 2002-2024 for average)\n    complete_data = annual_merged[annual_merged['year'] <= 2024]\n    avg_share = complete_data['usa_share'].mean()\n    plt.axhline(y=avg_share, color=ITALY_RED, linestyle='--', alpha=0.7, \n                label=f'Average: {avg_share:.1f}%')\n    plt.legend()\n    \n    plt.tight_layout()\n    plt.savefig('plots/official_market_share_chart.png', dpi=300, bbox_inches='tight')\n    plt.show()\n    \n    print(\"Market share chart saved as 'plots/official_market_share_chart.png'\")\n\ndef generate_growth_comparison_chart(annual_data):\n    \"\"\"Generate annual growth rate comparison\"\"\"\n    # Calculate growth rates\n    annual_data['usa_growth'] = annual_data['value_millions_usa'].pct_change() * 100\n    annual_data['world_growth'] = annual_data['value_millions_world'].pct_change() * 100\n    annual_data['rest_world_growth'] = annual_data['rest_world'].pct_change() * 100\n    \n    # Filter for years with data\n    growth_data = annual_data[annual_data['year'] >= 2003].copy()\n    \n    fig, ax = plt.subplots(figsize=(14, 8))\n    \n    x = np.arange(len(growth_data))\n    width = 0.25\n    \n    bars1 = ax.bar(x - width/2, growth_data['usa_growth'], width, \n                   label='USA', color=USA_BLUE, alpha=0.8)\n    bars2 = ax.bar(x + width/2, growth_data['rest_world_growth'], width, \n                   label='Rest of World', color=ITALY_RED, alpha=0.8)\n    \n    ax.set_xlabel('Year', fontsize=12)\n    ax.set_ylabel('Annual Growth Rate (%)', fontsize=12)\n    ax.set_title('Italian Pharmaceutical Export Growth Rates\\n(Year-over-Year % Change 2003-2024)', \n                 fontsize=16, fontweight='bold', pad=20)\n    ax.set_xticks(x)\n    ax.set_xticklabels(growth_data['year'], rotation=45)\n    ax.legend()\n    ax.grid(True, alpha=0.3, axis='y')\n    ax.axhline(y=0, color='black', linestyle='-', alpha=0.5)\n    \n    plt.tight_layout()\n    plt.savefig('plots/official_growth_comparison_chart.png', dpi=300, bbox_inches='tight')\n    plt.show()\n    \n    print(\"Growth comparison chart saved as 'plots/official_growth_comparison_chart.png'\")\n\ndef validate_against_reference_data(usa_data, world_data):\n    \"\"\"Validate data against provided reference figures\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"DATA VALIDATION AGAINST 2024 REFERENCE FIGURES\")\n    print(\"=\"*60)\n    \n    # Reference data (provided by user)\n    ref_pharma_world_2024 = 52.866438641  # EUR billion\n    ref_pharma_usa_2024 = 9.987524344    # EUR billion\n    ref_total_world_2024 = 623.508676156  # EUR billion  \n    ref_total_usa_2024 = 64.759446832     # EUR billion\n    \n    # Our 2024 data\n    usa_2024 = usa_data[usa_data['year'] == 2024]['value_millions'].sum() / 1000  # Convert to billions\n    world_2024 = world_data[world_data['year'] == 2024]['value_millions'].sum() / 1000  # Convert to billions\n    \n    print(f\"\\nPHARMACEUTICAL EXPORTS 2024 VALIDATION:\")\n    print(f\"   • Reference USA: €{ref_pharma_usa_2024:.2f}B\")\n    print(f\"   • Our Data USA: €{usa_2024:.2f}B\")\n    print(f\"   • Difference: €{abs(ref_pharma_usa_2024 - usa_2024):.3f}B\")\n    \n    print(f\"\\n   • Reference World: €{ref_pharma_world_2024:.2f}B\") \n    print(f\"   • Our Data World: €{world_2024:.2f}B\")\n    print(f\"   • Difference: €{abs(ref_pharma_world_2024 - world_2024):.3f}B\")\n    \n    print(f\"\\nMARKET SHARE VALIDATION:\")\n    ref_pharma_world_share = (ref_pharma_usa_2024 / ref_pharma_world_2024) * 100\n    our_pharma_world_share = (usa_2024 / world_2024) * 100 if world_2024 > 0 else 0\n    print(f\"   • Reference USA/World pharma share: {ref_pharma_world_share:.2f}%\")\n    print(f\"   • Our calculated pharma share: {our_pharma_world_share:.2f}%\")\n    \n    ref_usa_total_share = (ref_pharma_usa_2024 / ref_total_usa_2024) * 100  \n    print(f\"   • Reference pharma/total USA exports: {ref_usa_total_share:.2f}%\")\n    \n    print(\"\\nVALIDATION RESULT: Pharmaceutical dataset matches reference figures exactly\")\n    print(\"=\"*60)\n\n\n\n\ndef print_key_statistics(usa_data, world_data, market_share_data, annual_data):\n    \"\"\"Print key statistics for presentation\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"KEY STATISTICS FOR PRESENTATION\")\n    print(\"=\"*60)\n    \n    # Current market size\n    recent_usa = usa_data[usa_data['year'] >= 2020]['value_millions'].mean() * 12\n    recent_world = world_data[world_data['year'] >= 2020]['value_millions'].mean() * 12\n    usa_share_recent = (recent_usa / recent_world) * 100\n    \n    print(f\"\\nMARKET SIZE (2020-2024 Average):\")\n    print(f\"   • USA Market: €{recent_usa/1000:.1f} billion annually\")\n    print(f\"   • World Total: €{recent_world/1000:.1f} billion annually\")\n    print(f\"   • USA Share: {usa_share_recent:.1f}% of total Italian pharma exports\")\n    \n    # Growth trends\n    growth_2019_2024_usa = ((usa_data[usa_data['year'] == 2024]['value_millions'].sum() / \n                            usa_data[usa_data['year'] == 2019]['value_millions'].sum()) - 1) * 100\n    growth_2019_2024_world = ((world_data[world_data['year'] == 2024]['value_millions'].sum() / \n                              world_data[world_data['year'] == 2019]['value_millions'].sum()) - 1) * 100\n    \n    print(f\"\\nGROWTH TRENDS (2019-2024):\")\n    print(f\"   • USA Market Growth: +{growth_2019_2024_usa:.1f}%\")\n    print(f\"   • World Market Growth: +{growth_2019_2024_world:.1f}%\")\n    print(f\"   • USA outpacing world by: {growth_2019_2024_usa - growth_2019_2024_world:.1f} percentage points\")\n    \n    # Political period analysis\n    trump1_avg = usa_data[(usa_data['year'] >= 2017) & (usa_data['year'] <= 2020)]['value_millions'].mean()\n    biden_avg = usa_data[(usa_data['year'] >= 2021) & (usa_data['year'] <= 2024)]['value_millions'].mean()\n    \n    print(f\"\\nPOLITICAL PERIOD COMPARISON:\")\n    print(f\"   • Trump 1.0 (2017-2020): €{trump1_avg:.0f}M monthly average\")\n    print(f\"   • Biden (2021-2024): €{biden_avg:.0f}M monthly average\")\n    print(f\"   • Biden era growth: +{((biden_avg/trump1_avg)-1)*100:.1f}%\")\n    \n    # Risk assessment\n    max_monthly = usa_data['value_millions'].max()\n    volatility = usa_data['value_millions'].std()\n    \n    print(f\"\\nRISK FACTORS:\")\n    print(f\"   • Peak monthly export: €{max_monthly:.0f}M\")\n    print(f\"   • Monthly volatility: ±€{volatility:.0f}M (std dev)\")\n    print(f\"   • At 10% tariff impact: ~€{recent_usa * 0.1 / 1000:.1f}B annual revenue at risk\")\n    print(f\"   • At 20% tariff impact: ~€{recent_usa * 0.2 / 1000:.1f}B annual revenue at risk\")\n    \n    print(f\"\\nKEY INSIGHTS:\")\n    print(f\"   • USA is Italy's {usa_share_recent:.0f}% pharmaceutical export market\")\n    print(f\"   • Strong growth momentum even during political uncertainty\")\n    print(f\"   • High absolute values mean significant revenue exposure to policy changes\")\n    print(f\"   • Seasonal patterns suggest consistent pharmaceutical demand\")\n    \n    print(\"\\n\" + \"=\"*60)\n\nif __name__ == \"__main__\":\n    print(\"Loading and processing Italian pharmaceutical export data...\")\n    \n    # Load data\n    df, usa_data, world_data, usa_data_all, world_data_all = load_and_process_data()\n    market_share_data = calculate_market_share(usa_data, world_data)\n    market_share_data_all = calculate_market_share(usa_data_all, world_data_all)\n    annual_data = calculate_annual_data(usa_data, world_data)\n    \n    print(f\"Data loaded: {len(df)} records from {df['TIME_PERIOD'].min().strftime('%Y-%m')} to {df['TIME_PERIOD'].max().strftime('%Y-%m')}\")\n    \n    # Generate all visualizations\n    print(\"\\nGenerating visualizations...\")\n    \n    generate_timeline_chart(usa_data_all, world_data_all)\n    generate_market_share_chart(usa_data_all, world_data_all)\n    generate_growth_comparison_chart(annual_data)\n    \n    # Validate against reference data first\n    validate_against_reference_data(usa_data, world_data)\n    \n    # Print statistics\n    print_key_statistics(usa_data, world_data, market_share_data, annual_data)\n    \n    print(\"\\nAll visualizations completed!\")\n    print(\"Files created:\")\n    print(\"   • plots/official_timeline_chart.png\")\n    print(\"   • plots/official_market_share_chart.png\") \n    print(\"   • plots/official_growth_comparison_chart.png\")","numLines":303,"startLine":1,"totalLines":303}}}
{"parentUuid":"5edb52ee-9591-4013-902e-6bc207e3a3b0","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VMbLojdBSnEEY9qPzUW7pT","type":"tool_result","content":"     1→import pandas as pd\n     2→import matplotlib.pyplot as plt\n     3→import numpy as np\n     4→from datetime import datetime\n     5→import warnings\n     6→warnings.filterwarnings('ignore')\n     7→\n     8→# Set Italian color scheme\n     9→ITALY_GREEN = '#009246'\n    10→ITALY_WHITE = '#FFFFFF'\n    11→ITALY_RED = '#CE2B37'\n    12→USA_BLUE = '#002868'\n    13→SECTOR_COLORS = ['#009246', '#CE2B37', '#002868', '#FF6B35', '#8B4513', '#4B0082', '#228B22', '#DC143C', '#00008B', '#B8860B']\n    14→\n    15→plt.style.use('default')\n    16→plt.rcParams['figure.figsize'] = (14, 8)\n    17→plt.rcParams['font.size'] = 11\n    18→\n    19→def load_multi_sector_data():\n    20→    \"\"\"Load and process the multi-sector pharmaceutical export data\"\"\"\n    21→    df = pd.read_csv('data/ita_export_usa_world_pharma_plus_other_sectors.csv')\n    22→    \n    23→    # Clean and process the data\n    24→    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    25→    df['year'] = df['TIME_PERIOD'].dt.year\n    26→    df['month'] = df['TIME_PERIOD'].dt.month\n    27→    df['value_billions'] = df['OBS_VALUE'] / 1_000_000_000\n    28→    \n    29→    # Clean product names for better display\n    30→    sector_mapping = {\n    31→        'Food and live animals': 'Food & Live Animals',\n    32→        'Beverages and tobacco': 'Beverages & Tobacco',\n    33→        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n    34→        'Machinery and transport equipment': 'Machinery & Transport',\n    35→        'Beverages': 'Beverages',\n    36→        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n    37→        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n    38→        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n    39→        'Other transport equipment': 'Other Transport Equipment',\n    40→        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    41→    }\n    42→    \n    43→    df['sector_name'] = df['PRODUCT'].map(sector_mapping)\n    44→    \n    45→    return df\n    46→\n    47→def calculate_sector_statistics(df):\n    48→    \"\"\"Calculate key statistics for each sector\"\"\"\n    49→    # Focus on complete years only (2020-2024) to avoid incomplete 2025 data\n    50→    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)].copy()\n    51→    \n    52→    sector_stats = []\n    53→    for product in df['PRODUCT'].unique():\n    54→        sector_data = df[df['PRODUCT'] == product].copy()\n    55→        recent_sector = recent_data[recent_data['PRODUCT'] == product].copy()\n    56→        \n    57→        if len(recent_sector) == 0:\n    58→            continue\n    59→            \n    60→        # Calculate metrics\n    61→        total_recent = recent_sector['value_billions'].sum()\n    62→        avg_monthly = recent_sector['value_billions'].mean()\n    63→        volatility = recent_sector['value_billions'].std() / avg_monthly * 100 if avg_monthly > 0 else 0\n    64→        \n    65→        # Growth calculation (2020 vs 2024)\n    66→        year_2020 = sector_data[sector_data['year'] == 2020]['value_billions'].sum()\n    67→        year_2024 = sector_data[sector_data['year'] == 2024]['value_billions'].sum()\n    68→        \n    69→        if year_2020 > 0 and year_2024 > 0:\n    70→            growth_rate = ((year_2024 / year_2020) - 1) * 100\n    71→        else:\n    72→            growth_rate = 0\n    73→        \n    74→        sector_stats.append({\n    75→            'product': product,\n    76→            'sector_name': df[df['PRODUCT'] == product]['sector_name'].iloc[0],\n    77→            'total_recent': total_recent,\n    78→            'avg_monthly': avg_monthly,\n    79→            'volatility': volatility,\n    80→            'growth_rate': growth_rate\n    81→        })\n    82→    \n    83→    return pd.DataFrame(sector_stats).sort_values('total_recent', ascending=False)\n    84→\n    85→def generate_market_share_dashboard(df):\n    86→    \"\"\"Generate market share evolution dashboard for top 5 sectors\"\"\"\n    87→    # Get top 5 sectors by recent volume (complete years only)\n    88→    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)]\n    89→    top_sectors = recent_data.groupby('PRODUCT')['value_billions'].sum().nlargest(5).index\n    90→    \n    91→    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n    92→    \n    93→    # Timeline evolution - exclude incomplete 2025 data\n    94→    complete_years_data = df[df['year'] <= 2024]\n    95→    for i, product in enumerate(top_sectors):\n    96→        sector_data = complete_years_data[complete_years_data['PRODUCT'] == product].copy()\n    97→        sector_annual = sector_data.groupby('year')['value_billions'].sum()\n    98→        sector_name = df[df['PRODUCT'] == product]['sector_name'].iloc[0]\n    99→        \n   100→        ax1.plot(sector_annual.index, sector_annual.values, \n   101→                label=sector_name, linewidth=2.5, color=SECTOR_COLORS[i])\n   102→    \n   103→    ax1.set_title('Italian Export Evolution to USA by Sector\\n(Annual Totals 2002-2024)', \n   104→                  fontsize=14, fontweight='bold')\n   105→    ax1.set_xlabel('Year', fontsize=12)\n   106→    ax1.set_ylabel('Export Value (EUR billions)', fontsize=12)\n   107→    ax1.grid(True, alpha=0.3)\n   108→    ax1.legend(loc='upper left')\n   109→    \n   110→    # Market share pie chart (2020-2024 average)\n   111→    recent_totals = recent_data.groupby('PRODUCT')['value_billions'].sum().reset_index()\n   112→    recent_totals['sector_name'] = recent_totals['PRODUCT'].map({\n   113→        'Food and live animals': 'Food & Live Animals',\n   114→        'Beverages and tobacco': 'Beverages & Tobacco',\n   115→        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n   116→        'Machinery and transport equipment': 'Machinery & Transport',\n   117→        'Beverages': 'Beverages',\n   118→        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n   119→        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n   120→        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n   121→        'Other transport equipment': 'Other Transport Equipment',\n   122→        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n   123→    })\n   124→    recent_totals = recent_totals.sort_values('value_billions', ascending=False)\n   125→    \n   126→    # Top 5 + Others\n   127→    top_5_sectors = recent_totals.head(5)\n   128→    others_total = recent_totals.tail(len(recent_totals)-5)['value_billions'].sum() if len(recent_totals) > 5 else 0\n   129→    \n   130→    sizes = list(top_5_sectors['value_billions'])\n   131→    labels = list(top_5_sectors['sector_name'])\n   132→    if others_total > 0:\n   133→        sizes.append(others_total)\n   134→        labels.append('Others')\n   135→    \n   136→    colors = SECTOR_COLORS[:len(sizes)]\n   137→    \n   138→    if len(sizes) > 0:\n   139→        wedges, texts, autotexts = ax2.pie(sizes, labels=labels, autopct='%1.1f%%', \n   140→                                           colors=colors, startangle=90)\n   141→    ax2.set_title('Market Share by Sector\\n(2020-2024 Average)', \n   142→                  fontsize=14, fontweight='bold')\n   143→    \n   144→    plt.tight_layout()\n   145→    plt.savefig('plots/multi_sector_dashboard.png', dpi=300, bbox_inches='tight')\n   146→    plt.show()\n   147→    \n   148→    print(\"Market share dashboard saved as 'plots/multi_sector_dashboard.png'\")\n   149→\n   150→def generate_growth_performance_chart(sector_stats):\n   151→    \"\"\"Generate sector growth performance comparison\"\"\"\n   152→    plt.figure(figsize=(12, 8))\n   153→    \n   154→    # Exclude Beverages & Tobacco from the analysis\n   155→    filtered_stats = sector_stats[sector_stats['sector_name'] != 'Beverages & Tobacco'].copy()\n   156→    \n   157→    # Growth rate comparison\n   158→    sorted_growth = filtered_stats.sort_values('growth_rate', ascending=True)\n   159→    colors_growth = [ITALY_RED if 'Pharmaceuticals' in str(name) else ITALY_GREEN \n   160→                    for name in sorted_growth['sector_name']]\n   161→    \n   162→    bars = plt.barh(range(len(sorted_growth)), sorted_growth['growth_rate'], \n   163→                    color=colors_growth, alpha=0.8)\n   164→    \n   165→    plt.yticks(range(len(sorted_growth)), sorted_growth['sector_name'])\n   166→    plt.xlabel('Growth Rate 2020-2024 (%)', fontsize=12)\n   167→    plt.title('Italian Export Sectors to USA - Growth Performance\\n(2020-2024, Excluding Beverages & Tobacco)', \n   168→              fontsize=14, fontweight='bold')\n   169→    plt.grid(True, alpha=0.3, axis='x')\n   170→    plt.axvline(x=0, color='black', linestyle='-', alpha=0.5)\n   171→    \n   172→    # Add value labels\n   173→    for i, bar in enumerate(bars):\n   174→        width = bar.get_width()\n   175→        # Adjust positioning to keep labels inside plot area\n   176→        if width >= 0:\n   177→            x_pos = width - 1  # Position inside the bar for positive values\n   178→            ha = 'right'\n   179→        else:\n   180→            x_pos = width + 1  # Position inside the bar for negative values  \n   181→            ha = 'left'\n   182→        plt.text(x_pos, bar.get_y() + bar.get_height()/2.,\n   183→                f'{width:.1f}%', ha=ha, va='center', fontweight='bold', \n   184→                color='white' if abs(width) > 10 else 'black')\n   185→    \n   186→    # Add legend\n   187→    from matplotlib.patches import Patch\n   188→    legend_elements = [Patch(facecolor=ITALY_RED, label='Pharmaceuticals'),\n   189→                      Patch(facecolor=ITALY_GREEN, label='Other Sectors')]\n   190→    plt.legend(handles=legend_elements, loc='lower right')\n   191→    \n   192→    plt.tight_layout()\n   193→    plt.savefig('plots/sector_growth_performance.png', dpi=300, bbox_inches='tight')\n   194→    plt.show()\n   195→    \n   196→    print(\"Growth performance chart saved as 'plots/sector_growth_performance.png'\")\n   197→\n   198→def validate_2024_data(df):\n   199→    \"\"\"Validate against provided 2024 reference data\"\"\"\n   200→    print(\"\\n\" + \"=\"*70)\n   201→    print(\"DATA VALIDATION AGAINST 2024 REFERENCE FIGURES\")\n   202→    print(\"=\"*70)\n   203→    \n   204→    # Reference data provided\n   205→    ref_pharma_world_2024 = 52866438641 / 1_000_000_000  # 52.87B EUR\n   206→    ref_total_world_2024 = 623508676156 / 1_000_000_000  # 623.51B EUR  \n   207→    ref_pharma_usa_2024 = 9987524344 / 1_000_000_000    # 9.99B EUR\n   208→    ref_total_usa_2024 = 64759446832 / 1_000_000_000     # 64.76B EUR\n   209→    \n   210→    # Calculate from our multi-sector data (2024 only)\n   211→    data_2024 = df[df['year'] == 2024]\n   212→    \n   213→    # Find pharmaceutical data\n   214→    pharma_usa_2024 = data_2024[data_2024['PRODUCT'] == 'Medicinal and pharmaceutical products']['value_billions'].sum()\n   215→    total_usa_2024 = data_2024['value_billions'].sum()\n   216→    \n   217→    print(f\"\\nUSA EXPORTS 2024 COMPARISON:\")\n   218→    print(f\"   • Reference Pharma to USA: EUR {ref_pharma_usa_2024:.2f}B\")\n   219→    print(f\"   • Our Data Pharma to USA: EUR {pharma_usa_2024:.2f}B\")\n   220→    print(f\"   • Difference: {abs(ref_pharma_usa_2024 - pharma_usa_2024):.2f}B\")\n   221→    \n   222→    print(f\"\\n   • Reference Total to USA: EUR {ref_total_usa_2024:.2f}B\") \n   223→    print(f\"   • Our Data Total to USA: EUR {total_usa_2024:.2f}B\")\n   224→    print(f\"   • Difference: {abs(ref_total_usa_2024 - total_usa_2024):.2f}B\")\n   225→    \n   226→    # Calculate USA pharma market share\n   227→    ref_usa_pharma_share = (ref_pharma_usa_2024 / ref_total_usa_2024) * 100\n   228→    our_usa_pharma_share = (pharma_usa_2024 / total_usa_2024) * 100 if total_usa_2024 > 0 else 0\n   229→    \n   230→    print(f\"\\nUSA PHARMA MARKET SHARE 2024:\")\n   231→    print(f\"   • Reference calculation: {ref_usa_pharma_share:.2f}%\")\n   232→    print(f\"   • Our data calculation: {our_usa_pharma_share:.2f}%\")\n   233→    \n   234→    print(f\"\\nNOTE: World export data (pharma: {ref_pharma_world_2024:.1f}B, total: {ref_total_world_2024:.1f}B)\")\n   235→    print(f\"      requires separate pharmaceutical-only dataset for validation\")\n   236→    \n   237→    print(\"=\"*70)\n   238→\n   239→def print_multi_sector_insights(sector_stats, df):\n   240→    \"\"\"Print key insights for presentation\"\"\"\n   241→    print(\"\\n\" + \"=\"*70)\n   242→    print(\"MULTI-SECTOR ANALYSIS - KEY INSIGHTS\")\n   243→    print(\"=\"*70)\n   244→    \n   245→    pharma_mask = sector_stats['sector_name'] == 'Pharmaceuticals'\n   246→    if pharma_mask.any():\n   247→        pharma_stats = sector_stats[pharma_mask].iloc[0]\n   248→        pharma_rank = sector_stats.reset_index().index[pharma_mask].tolist()[0] + 1\n   249→    else:\n   250→        pharma_stats = None\n   251→        pharma_rank = 0\n   252→    \n   253→    if pharma_stats is not None:\n   254→        print(f\"\\nPHARMACEUTICAL SECTOR POSITION:\")\n   255→        print(f\"   • Ranking: #{pharma_rank} of {len(sector_stats)} major export sectors\")\n   256→        print(f\"   • Market Size: EUR{pharma_stats['total_recent']:.1f}B (2020-2024)\")\n   257→        print(f\"   • Growth Rate: {pharma_stats['growth_rate']:.1f}% (2020-2024)\")\n   258→        print(f\"   • Volatility: {pharma_stats['volatility']:.1f}% (coefficient of variation)\")\n   259→    else:\n   260→        print(f\"\\nPHARMACEUTICAL SECTOR POSITION:\")\n   261→        print(f\"   • Data validation required for sector-specific metrics\")\n   262→    \n   263→    # Top 3 sectors\n   264→    top_3 = sector_stats.head(3)\n   265→    print(f\"\\nTOP 3 ITALIAN EXPORT SECTORS TO USA (2020-2024):\")\n   266→    for i, (_, row) in enumerate(top_3.iterrows(), 1):\n   267→        print(f\"   {i}. {row['sector_name']}: EUR{row['total_recent']:.1f}B ({row['growth_rate']:.1f}% growth)\")\n   268→    \n   269→    # Strategic insights\n   270→    high_growth_sectors = sector_stats[sector_stats['growth_rate'] > 0]\n   271→    print(f\"\\nSTRATEGIC INSIGHTS:\")\n   272→    print(f\"   • {len(high_growth_sectors)} of {len(sector_stats)} sectors showing positive growth (2020-2024)\")\n   273→    print(f\"   • Pharmaceuticals represent strategic high-growth sector\")\n   274→    print(f\"   • Analysis based on complete years (2020-2024) to avoid incomplete 2025 data\")\n   275→    \n   276→    print(\"\\n\" + \"=\"*70)\n   277→\n   278→if __name__ == \"__main__\":\n   279→    print(\"Loading multi-sector Italian export data...\")\n   280→    \n   281→    # Load and analyze data\n   282→    df = load_multi_sector_data()\n   283→    sector_stats = calculate_sector_statistics(df)\n   284→    \n   285→    print(f\"Data loaded: {len(df)} records covering {len(df['PRODUCT'].unique())} sectors\")\n   286→    print(f\"Time period: {df['TIME_PERIOD'].min().strftime('%Y-%m')} to {df['TIME_PERIOD'].max().strftime('%Y-%m')}\")\n   287→    print(f\"Analysis period: 2020-2024 (complete years only)\")\n   288→    \n   289→    # Validate data\n   290→    validate_2024_data(df)\n   291→    \n   292→    # Generate visualizations\n   293→    print(\"\\nGenerating multi-sector comparative visualizations...\")\n   294→    \n   295→    generate_market_share_dashboard(df)\n   296→    generate_growth_performance_chart(sector_stats)\n   297→    \n   298→    # Print insights\n   299→    print_multi_sector_insights(sector_stats, df)\n   300→    \n   301→    print(\"\\nMulti-sector visualizations completed!\")\n   302→    print(\"Files created:\")\n   303→    print(\"   • plots/multi_sector_dashboard.png\")\n   304→    print(\"   • plots/sector_growth_performance.png\")\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"0665eecd-bb2c-4cf5-ac1c-b7c0bb7a3fcd","timestamp":"2025-08-06T12:38:02.093Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\multi_sector_analyzer.py","content":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Set Italian color scheme\nITALY_GREEN = '#009246'\nITALY_WHITE = '#FFFFFF'\nITALY_RED = '#CE2B37'\nUSA_BLUE = '#002868'\nSECTOR_COLORS = ['#009246', '#CE2B37', '#002868', '#FF6B35', '#8B4513', '#4B0082', '#228B22', '#DC143C', '#00008B', '#B8860B']\n\nplt.style.use('default')\nplt.rcParams['figure.figsize'] = (14, 8)\nplt.rcParams['font.size'] = 11\n\ndef load_multi_sector_data():\n    \"\"\"Load and process the multi-sector pharmaceutical export data\"\"\"\n    df = pd.read_csv('data/ita_export_usa_world_pharma_plus_other_sectors.csv')\n    \n    # Clean and process the data\n    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    df['year'] = df['TIME_PERIOD'].dt.year\n    df['month'] = df['TIME_PERIOD'].dt.month\n    df['value_billions'] = df['OBS_VALUE'] / 1_000_000_000\n    \n    # Clean product names for better display\n    sector_mapping = {\n        'Food and live animals': 'Food & Live Animals',\n        'Beverages and tobacco': 'Beverages & Tobacco',\n        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n        'Machinery and transport equipment': 'Machinery & Transport',\n        'Beverages': 'Beverages',\n        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n        'Other transport equipment': 'Other Transport Equipment',\n        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    }\n    \n    df['sector_name'] = df['PRODUCT'].map(sector_mapping)\n    \n    return df\n\ndef calculate_sector_statistics(df):\n    \"\"\"Calculate key statistics for each sector\"\"\"\n    # Focus on complete years only (2020-2024) to avoid incomplete 2025 data\n    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)].copy()\n    \n    sector_stats = []\n    for product in df['PRODUCT'].unique():\n        sector_data = df[df['PRODUCT'] == product].copy()\n        recent_sector = recent_data[recent_data['PRODUCT'] == product].copy()\n        \n        if len(recent_sector) == 0:\n            continue\n            \n        # Calculate metrics\n        total_recent = recent_sector['value_billions'].sum()\n        avg_monthly = recent_sector['value_billions'].mean()\n        volatility = recent_sector['value_billions'].std() / avg_monthly * 100 if avg_monthly > 0 else 0\n        \n        # Growth calculation (2020 vs 2024)\n        year_2020 = sector_data[sector_data['year'] == 2020]['value_billions'].sum()\n        year_2024 = sector_data[sector_data['year'] == 2024]['value_billions'].sum()\n        \n        if year_2020 > 0 and year_2024 > 0:\n            growth_rate = ((year_2024 / year_2020) - 1) * 100\n        else:\n            growth_rate = 0\n        \n        sector_stats.append({\n            'product': product,\n            'sector_name': df[df['PRODUCT'] == product]['sector_name'].iloc[0],\n            'total_recent': total_recent,\n            'avg_monthly': avg_monthly,\n            'volatility': volatility,\n            'growth_rate': growth_rate\n        })\n    \n    return pd.DataFrame(sector_stats).sort_values('total_recent', ascending=False)\n\ndef generate_market_share_dashboard(df):\n    \"\"\"Generate market share evolution dashboard for top 5 sectors\"\"\"\n    # Get top 5 sectors by recent volume (complete years only)\n    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)]\n    top_sectors = recent_data.groupby('PRODUCT')['value_billions'].sum().nlargest(5).index\n    \n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))\n    \n    # Timeline evolution - exclude incomplete 2025 data\n    complete_years_data = df[df['year'] <= 2024]\n    for i, product in enumerate(top_sectors):\n        sector_data = complete_years_data[complete_years_data['PRODUCT'] == product].copy()\n        sector_annual = sector_data.groupby('year')['value_billions'].sum()\n        sector_name = df[df['PRODUCT'] == product]['sector_name'].iloc[0]\n        \n        ax1.plot(sector_annual.index, sector_annual.values, \n                label=sector_name, linewidth=2.5, color=SECTOR_COLORS[i])\n    \n    ax1.set_title('Italian Export Evolution to USA by Sector\\n(Annual Totals 2002-2024)', \n                  fontsize=14, fontweight='bold')\n    ax1.set_xlabel('Year', fontsize=12)\n    ax1.set_ylabel('Export Value (EUR billions)', fontsize=12)\n    ax1.grid(True, alpha=0.3)\n    ax1.legend(loc='upper left')\n    \n    # Market share pie chart (2020-2024 average)\n    recent_totals = recent_data.groupby('PRODUCT')['value_billions'].sum().reset_index()\n    recent_totals['sector_name'] = recent_totals['PRODUCT'].map({\n        'Food and live animals': 'Food & Live Animals',\n        'Beverages and tobacco': 'Beverages & Tobacco',\n        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n        'Machinery and transport equipment': 'Machinery & Transport',\n        'Beverages': 'Beverages',\n        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n        'Other transport equipment': 'Other Transport Equipment',\n        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    })\n    recent_totals = recent_totals.sort_values('value_billions', ascending=False)\n    \n    # Top 5 + Others\n    top_5_sectors = recent_totals.head(5)\n    others_total = recent_totals.tail(len(recent_totals)-5)['value_billions'].sum() if len(recent_totals) > 5 else 0\n    \n    sizes = list(top_5_sectors['value_billions'])\n    labels = list(top_5_sectors['sector_name'])\n    if others_total > 0:\n        sizes.append(others_total)\n        labels.append('Others')\n    \n    colors = SECTOR_COLORS[:len(sizes)]\n    \n    if len(sizes) > 0:\n        wedges, texts, autotexts = ax2.pie(sizes, labels=labels, autopct='%1.1f%%', \n                                           colors=colors, startangle=90)\n    ax2.set_title('Market Share by Sector\\n(2020-2024 Average)', \n                  fontsize=14, fontweight='bold')\n    \n    plt.tight_layout()\n    plt.savefig('plots/multi_sector_dashboard.png', dpi=300, bbox_inches='tight')\n    plt.show()\n    \n    print(\"Market share dashboard saved as 'plots/multi_sector_dashboard.png'\")\n\ndef generate_growth_performance_chart(sector_stats):\n    \"\"\"Generate sector growth performance comparison\"\"\"\n    plt.figure(figsize=(12, 8))\n    \n    # Exclude Beverages & Tobacco from the analysis\n    filtered_stats = sector_stats[sector_stats['sector_name'] != 'Beverages & Tobacco'].copy()\n    \n    # Growth rate comparison\n    sorted_growth = filtered_stats.sort_values('growth_rate', ascending=True)\n    colors_growth = [ITALY_RED if 'Pharmaceuticals' in str(name) else ITALY_GREEN \n                    for name in sorted_growth['sector_name']]\n    \n    bars = plt.barh(range(len(sorted_growth)), sorted_growth['growth_rate'], \n                    color=colors_growth, alpha=0.8)\n    \n    plt.yticks(range(len(sorted_growth)), sorted_growth['sector_name'])\n    plt.xlabel('Growth Rate 2020-2024 (%)', fontsize=12)\n    plt.title('Italian Export Sectors to USA - Growth Performance\\n(2020-2024, Excluding Beverages & Tobacco)', \n              fontsize=14, fontweight='bold')\n    plt.grid(True, alpha=0.3, axis='x')\n    plt.axvline(x=0, color='black', linestyle='-', alpha=0.5)\n    \n    # Add value labels\n    for i, bar in enumerate(bars):\n        width = bar.get_width()\n        # Adjust positioning to keep labels inside plot area\n        if width >= 0:\n            x_pos = width - 1  # Position inside the bar for positive values\n            ha = 'right'\n        else:\n            x_pos = width + 1  # Position inside the bar for negative values  \n            ha = 'left'\n        plt.text(x_pos, bar.get_y() + bar.get_height()/2.,\n                f'{width:.1f}%', ha=ha, va='center', fontweight='bold', \n                color='white' if abs(width) > 10 else 'black')\n    \n    # Add legend\n    from matplotlib.patches import Patch\n    legend_elements = [Patch(facecolor=ITALY_RED, label='Pharmaceuticals'),\n                      Patch(facecolor=ITALY_GREEN, label='Other Sectors')]\n    plt.legend(handles=legend_elements, loc='lower right')\n    \n    plt.tight_layout()\n    plt.savefig('plots/sector_growth_performance.png', dpi=300, bbox_inches='tight')\n    plt.show()\n    \n    print(\"Growth performance chart saved as 'plots/sector_growth_performance.png'\")\n\ndef validate_2024_data(df):\n    \"\"\"Validate against provided 2024 reference data\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"DATA VALIDATION AGAINST 2024 REFERENCE FIGURES\")\n    print(\"=\"*70)\n    \n    # Reference data provided\n    ref_pharma_world_2024 = 52866438641 / 1_000_000_000  # 52.87B EUR\n    ref_total_world_2024 = 623508676156 / 1_000_000_000  # 623.51B EUR  \n    ref_pharma_usa_2024 = 9987524344 / 1_000_000_000    # 9.99B EUR\n    ref_total_usa_2024 = 64759446832 / 1_000_000_000     # 64.76B EUR\n    \n    # Calculate from our multi-sector data (2024 only)\n    data_2024 = df[df['year'] == 2024]\n    \n    # Find pharmaceutical data\n    pharma_usa_2024 = data_2024[data_2024['PRODUCT'] == 'Medicinal and pharmaceutical products']['value_billions'].sum()\n    total_usa_2024 = data_2024['value_billions'].sum()\n    \n    print(f\"\\nUSA EXPORTS 2024 COMPARISON:\")\n    print(f\"   • Reference Pharma to USA: EUR {ref_pharma_usa_2024:.2f}B\")\n    print(f\"   • Our Data Pharma to USA: EUR {pharma_usa_2024:.2f}B\")\n    print(f\"   • Difference: {abs(ref_pharma_usa_2024 - pharma_usa_2024):.2f}B\")\n    \n    print(f\"\\n   • Reference Total to USA: EUR {ref_total_usa_2024:.2f}B\") \n    print(f\"   • Our Data Total to USA: EUR {total_usa_2024:.2f}B\")\n    print(f\"   • Difference: {abs(ref_total_usa_2024 - total_usa_2024):.2f}B\")\n    \n    # Calculate USA pharma market share\n    ref_usa_pharma_share = (ref_pharma_usa_2024 / ref_total_usa_2024) * 100\n    our_usa_pharma_share = (pharma_usa_2024 / total_usa_2024) * 100 if total_usa_2024 > 0 else 0\n    \n    print(f\"\\nUSA PHARMA MARKET SHARE 2024:\")\n    print(f\"   • Reference calculation: {ref_usa_pharma_share:.2f}%\")\n    print(f\"   • Our data calculation: {our_usa_pharma_share:.2f}%\")\n    \n    print(f\"\\nNOTE: World export data (pharma: {ref_pharma_world_2024:.1f}B, total: {ref_total_world_2024:.1f}B)\")\n    print(f\"      requires separate pharmaceutical-only dataset for validation\")\n    \n    print(\"=\"*70)\n\ndef print_multi_sector_insights(sector_stats, df):\n    \"\"\"Print key insights for presentation\"\"\"\n    print(\"\\n\" + \"=\"*70)\n    print(\"MULTI-SECTOR ANALYSIS - KEY INSIGHTS\")\n    print(\"=\"*70)\n    \n    pharma_mask = sector_stats['sector_name'] == 'Pharmaceuticals'\n    if pharma_mask.any():\n        pharma_stats = sector_stats[pharma_mask].iloc[0]\n        pharma_rank = sector_stats.reset_index().index[pharma_mask].tolist()[0] + 1\n    else:\n        pharma_stats = None\n        pharma_rank = 0\n    \n    if pharma_stats is not None:\n        print(f\"\\nPHARMACEUTICAL SECTOR POSITION:\")\n        print(f\"   • Ranking: #{pharma_rank} of {len(sector_stats)} major export sectors\")\n        print(f\"   • Market Size: EUR{pharma_stats['total_recent']:.1f}B (2020-2024)\")\n        print(f\"   • Growth Rate: {pharma_stats['growth_rate']:.1f}% (2020-2024)\")\n        print(f\"   • Volatility: {pharma_stats['volatility']:.1f}% (coefficient of variation)\")\n    else:\n        print(f\"\\nPHARMACEUTICAL SECTOR POSITION:\")\n        print(f\"   • Data validation required for sector-specific metrics\")\n    \n    # Top 3 sectors\n    top_3 = sector_stats.head(3)\n    print(f\"\\nTOP 3 ITALIAN EXPORT SECTORS TO USA (2020-2024):\")\n    for i, (_, row) in enumerate(top_3.iterrows(), 1):\n        print(f\"   {i}. {row['sector_name']}: EUR{row['total_recent']:.1f}B ({row['growth_rate']:.1f}% growth)\")\n    \n    # Strategic insights\n    high_growth_sectors = sector_stats[sector_stats['growth_rate'] > 0]\n    print(f\"\\nSTRATEGIC INSIGHTS:\")\n    print(f\"   • {len(high_growth_sectors)} of {len(sector_stats)} sectors showing positive growth (2020-2024)\")\n    print(f\"   • Pharmaceuticals represent strategic high-growth sector\")\n    print(f\"   • Analysis based on complete years (2020-2024) to avoid incomplete 2025 data\")\n    \n    print(\"\\n\" + \"=\"*70)\n\nif __name__ == \"__main__\":\n    print(\"Loading multi-sector Italian export data...\")\n    \n    # Load and analyze data\n    df = load_multi_sector_data()\n    sector_stats = calculate_sector_statistics(df)\n    \n    print(f\"Data loaded: {len(df)} records covering {len(df['PRODUCT'].unique())} sectors\")\n    print(f\"Time period: {df['TIME_PERIOD'].min().strftime('%Y-%m')} to {df['TIME_PERIOD'].max().strftime('%Y-%m')}\")\n    print(f\"Analysis period: 2020-2024 (complete years only)\")\n    \n    # Validate data\n    validate_2024_data(df)\n    \n    # Generate visualizations\n    print(\"\\nGenerating multi-sector comparative visualizations...\")\n    \n    generate_market_share_dashboard(df)\n    generate_growth_performance_chart(sector_stats)\n    \n    # Print insights\n    print_multi_sector_insights(sector_stats, df)\n    \n    print(\"\\nMulti-sector visualizations completed!\")\n    print(\"Files created:\")\n    print(\"   • plots/multi_sector_dashboard.png\")\n    print(\"   • plots/sector_growth_performance.png\")","numLines":304,"startLine":1,"totalLines":304}}}
{"parentUuid":"0665eecd-bb2c-4cf5-ac1c-b7c0bb7a3fcd","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01WBGPoqsxw2pXC9sBhzq4pz","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Tcov8mK96cLiBFwrTY1yPa","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed"},{"id":"2","content":"Extract data from Python scripts to understand chart data sources","status":"completed"},{"id":"3","content":"Create Excel file with separate sheets for each plot's data","status":"in_progress"},{"id":"4","content":"Create Italian instructions file for recreating charts in Excel","status":"pending"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":11431,"cache_read_input_tokens":20731,"output_tokens":169,"service_tier":"standard"}},"requestId":"req_011CRrU9RCsteyrv8JRwnXjn","type":"assistant","uuid":"ea719f05-52fe-4642-8278-987c9afabc68","timestamp":"2025-08-06T12:38:09.043Z"}
{"parentUuid":"ea719f05-52fe-4642-8278-987c9afabc68","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Tcov8mK96cLiBFwrTY1yPa","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"212021e3-afee-49f6-b167-f5e67dc2ff53","timestamp":"2025-08-06T12:38:09.136Z","toolUseResult":{"oldTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"in_progress","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"pending","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"pending","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"completed","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"in_progress","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"pending","id":"4"}]}}
{"parentUuid":"212021e3-afee-49f6-b167-f5e67dc2ff53","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01GDHbDPf5QApAdseMC1inuB","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01NA1BfFcCFSWj2bjF5mTBa8","name":"Bash","input":{"command":"uv run data_processor.py","description":"Run data processor to generate chart data"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":356,"cache_read_input_tokens":32162,"output_tokens":82,"service_tier":"standard"}},"requestId":"req_011CRrU9snHvazyqs2TEYRzC","type":"assistant","uuid":"694ebf8d-dce6-4b80-bccb-23a338bf6680","timestamp":"2025-08-06T12:38:13.097Z"}
{"parentUuid":"694ebf8d-dce6-4b80-bccb-23a338bf6680","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01NA1BfFcCFSWj2bjF5mTBa8","type":"tool_result","content":"Loading and processing Italian pharmaceutical export data...\r\nData loaded: 561 records from 2002-01 to 2025-05\r\n\r\nGenerating visualizations...\r\nTimeline chart saved as 'plots/official_timeline_chart.png'\r\nMarket share chart saved as 'plots/official_market_share_chart.png'\r\nGrowth comparison chart saved as 'plots/official_growth_comparison_chart.png'\r\n\r\n============================================================\r\nDATA VALIDATION AGAINST 2024 REFERENCE FIGURES\r\n============================================================\r\n\r\nPHARMACEUTICAL EXPORTS 2024 VALIDATION:\r\n   � Reference USA: �9.99B\r\n   � Our Data USA: �9.99B\r\n   � Difference: �0.000B\r\n\r\n   � Reference World: �52.87B\r\n   � Our Data World: �52.87B\r\n   � Difference: �0.000B\r\n\r\nMARKET SHARE VALIDATION:\r\n   � Reference USA/World pharma share: 18.89%\r\n   � Our calculated pharma share: 18.89%\r\n   � Reference pharma/total USA exports: 15.42%\r\n\r\nVALIDATION RESULT: Pharmaceutical dataset matches reference figures exactly\r\n============================================================\r\n\r\n============================================================\r\nKEY STATISTICS FOR PRESENTATION\r\n============================================================\r\n\r\nMARKET SIZE (2020-2024 Average):\r\n   � USA Market: �7.1 billion annually\r\n   � World Total: �42.7 billion annually\r\n   � USA Share: 16.6% of total Italian pharma exports\r\n\r\nGROWTH TRENDS (2019-2024):\r\n   � USA Market Growth: +73.7%\r\n   � World Market Growth: +66.9%\r\n   � USA outpacing world by: 6.8 percentage points\r\n\r\nPOLITICAL PERIOD COMPARISON:\r\n   � Trump 1.0 (2017-2020): �397M monthly average\r\n   � Biden (2021-2024): �616M monthly average\r\n   � Biden era growth: +55.0%\r\n\r\nRISK FACTORS:\r\n   � Peak monthly export: �1180M\r\n   � Monthly volatility: ��256M (std dev)\r\n   � At 10% tariff impact: ~�0.7B annual revenue at risk\r\n   � At 20% tariff impact: ~�1.4B annual revenue at risk\r\n\r\nKEY INSIGHTS:\r\n   � USA is Italy's 17% pharmaceutical export market\r\n   � Strong growth momentum even during political uncertainty\r\n   � High absolute values mean significant revenue exposure to policy changes\r\n   � Seasonal patterns suggest consistent pharmaceutical demand\r\n\r\n============================================================\r\n\r\nAll visualizations completed!\r\nFiles created:\r\n   � plots/official_timeline_chart.png\r\n   � plots/official_market_share_chart.png\r\n   � plots/official_growth_comparison_chart.png","is_error":false}]},"uuid":"a9a910c2-3519-4c66-b410-5410c576e009","timestamp":"2025-08-06T12:38:29.754Z","toolUseResult":{"stdout":"Loading and processing Italian pharmaceutical export data...\r\nData loaded: 561 records from 2002-01 to 2025-05\r\n\r\nGenerating visualizations...\r\nTimeline chart saved as 'plots/official_timeline_chart.png'\r\nMarket share chart saved as 'plots/official_market_share_chart.png'\r\nGrowth comparison chart saved as 'plots/official_growth_comparison_chart.png'\r\n\r\n============================================================\r\nDATA VALIDATION AGAINST 2024 REFERENCE FIGURES\r\n============================================================\r\n\r\nPHARMACEUTICAL EXPORTS 2024 VALIDATION:\r\n   � Reference USA: �9.99B\r\n   � Our Data USA: �9.99B\r\n   � Difference: �0.000B\r\n\r\n   � Reference World: �52.87B\r\n   � Our Data World: �52.87B\r\n   � Difference: �0.000B\r\n\r\nMARKET SHARE VALIDATION:\r\n   � Reference USA/World pharma share: 18.89%\r\n   � Our calculated pharma share: 18.89%\r\n   � Reference pharma/total USA exports: 15.42%\r\n\r\nVALIDATION RESULT: Pharmaceutical dataset matches reference figures exactly\r\n============================================================\r\n\r\n============================================================\r\nKEY STATISTICS FOR PRESENTATION\r\n============================================================\r\n\r\nMARKET SIZE (2020-2024 Average):\r\n   � USA Market: �7.1 billion annually\r\n   � World Total: �42.7 billion annually\r\n   � USA Share: 16.6% of total Italian pharma exports\r\n\r\nGROWTH TRENDS (2019-2024):\r\n   � USA Market Growth: +73.7%\r\n   � World Market Growth: +66.9%\r\n   � USA outpacing world by: 6.8 percentage points\r\n\r\nPOLITICAL PERIOD COMPARISON:\r\n   � Trump 1.0 (2017-2020): �397M monthly average\r\n   � Biden (2021-2024): �616M monthly average\r\n   � Biden era growth: +55.0%\r\n\r\nRISK FACTORS:\r\n   � Peak monthly export: �1180M\r\n   � Monthly volatility: ��256M (std dev)\r\n   � At 10% tariff impact: ~�0.7B annual revenue at risk\r\n   � At 20% tariff impact: ~�1.4B annual revenue at risk\r\n\r\nKEY INSIGHTS:\r\n   � USA is Italy's 17% pharmaceutical export market\r\n   � Strong growth momentum even during political uncertainty\r\n   � High absolute values mean significant revenue exposure to policy changes\r\n   � Seasonal patterns suggest consistent pharmaceutical demand\r\n\r\n============================================================\r\n\r\nAll visualizations completed!\r\nFiles created:\r\n   � plots/official_timeline_chart.png\r\n   � plots/official_market_share_chart.png\r\n   � plots/official_growth_comparison_chart.png\r","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"a9a910c2-3519-4c66-b410-5410c576e009","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01RUyUcog7KG4BJSF8X1UvkR","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01E8xM5WmKdZhetiWuhK89Xu","name":"Bash","input":{"command":"uv run multi_sector_analyzer.py","description":"Run multi-sector analyzer to generate comparative data"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":713,"cache_read_input_tokens":32518,"output_tokens":86,"service_tier":"standard"}},"requestId":"req_011CRrUBShEJpU9TytApTQLV","type":"assistant","uuid":"5a68c624-bf34-4fad-9415-db2b74bbb3c5","timestamp":"2025-08-06T12:38:33.910Z"}
{"parentUuid":"5a68c624-bf34-4fad-9415-db2b74bbb3c5","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01E8xM5WmKdZhetiWuhK89Xu","type":"tool_result","content":"Loading multi-sector Italian export data...\r\nData loaded: 5610 records covering 10 sectors\r\nTime period: 2002-01 to 2025-05\r\nAnalysis period: 2020-2024 (complete years only)\r\n\r\n======================================================================\r\nDATA VALIDATION AGAINST 2024 REFERENCE FIGURES\r\n======================================================================\r\n\r\nUSA EXPORTS 2024 COMPARISON:\r\n   � Reference Pharma to USA: EUR 9.99B\r\n   � Our Data Pharma to USA: EUR 62.85B\r\n   � Difference: 52.87B\r\n\r\n   � Reference Total to USA: EUR 64.76B\r\n   � Our Data Total to USA: EUR 589.49B\r\n   � Difference: 524.73B\r\n\r\nUSA PHARMA MARKET SHARE 2024:\r\n   � Reference calculation: 15.42%\r\n   � Our data calculation: 10.66%\r\n\r\nNOTE: World export data (pharma: 52.9B, total: 623.5B)\r\n      requires separate pharmaceutical-only dataset for validation\r\n======================================================================\r\n\r\nGenerating multi-sector comparative visualizations...\r\nMarket share dashboard saved as 'plots/multi_sector_dashboard.png'\r\nGrowth performance chart saved as 'plots/sector_growth_performance.png'\r\n\r\n======================================================================\r\nMULTI-SECTOR ANALYSIS - KEY INSIGHTS\r\n======================================================================\r\n\r\nPHARMACEUTICAL SECTOR POSITION:\r\n   � Ranking: #3 of 10 major export sectors\r\n   � Market Size: EUR248.7B (2020-2024)\r\n   � Growth Rate: 61.4% (2020-2024)\r\n   � Volatility: 77.8% (coefficient of variation)\r\n\r\nTOP 3 ITALIAN EXPORT SECTORS TO USA (2020-2024):\r\n   1. Machinery & Transport: EUR1056.9B (37.5% growth)\r\n   2. Chemicals & Related: EUR489.4B (48.1% growth)\r\n   3. Pharmaceuticals: EUR248.7B (61.4% growth)\r\n\r\nSTRATEGIC INSIGHTS:\r\n   � 10 of 10 sectors showing positive growth (2020-2024)\r\n   � Pharmaceuticals represent strategic high-growth sector\r\n   � Analysis based on complete years (2020-2024) to avoid incomplete 2025 data\r\n\r\n======================================================================\r\n\r\nMulti-sector visualizations completed!\r\nFiles created:\r\n   � plots/multi_sector_dashboard.png\r\n   � plots/sector_growth_performance.png","is_error":false}]},"uuid":"6400051e-ed8f-4b0c-b2a5-15807f1a6af2","timestamp":"2025-08-06T12:38:40.608Z","toolUseResult":{"stdout":"Loading multi-sector Italian export data...\r\nData loaded: 5610 records covering 10 sectors\r\nTime period: 2002-01 to 2025-05\r\nAnalysis period: 2020-2024 (complete years only)\r\n\r\n======================================================================\r\nDATA VALIDATION AGAINST 2024 REFERENCE FIGURES\r\n======================================================================\r\n\r\nUSA EXPORTS 2024 COMPARISON:\r\n   � Reference Pharma to USA: EUR 9.99B\r\n   � Our Data Pharma to USA: EUR 62.85B\r\n   � Difference: 52.87B\r\n\r\n   � Reference Total to USA: EUR 64.76B\r\n   � Our Data Total to USA: EUR 589.49B\r\n   � Difference: 524.73B\r\n\r\nUSA PHARMA MARKET SHARE 2024:\r\n   � Reference calculation: 15.42%\r\n   � Our data calculation: 10.66%\r\n\r\nNOTE: World export data (pharma: 52.9B, total: 623.5B)\r\n      requires separate pharmaceutical-only dataset for validation\r\n======================================================================\r\n\r\nGenerating multi-sector comparative visualizations...\r\nMarket share dashboard saved as 'plots/multi_sector_dashboard.png'\r\nGrowth performance chart saved as 'plots/sector_growth_performance.png'\r\n\r\n======================================================================\r\nMULTI-SECTOR ANALYSIS - KEY INSIGHTS\r\n======================================================================\r\n\r\nPHARMACEUTICAL SECTOR POSITION:\r\n   � Ranking: #3 of 10 major export sectors\r\n   � Market Size: EUR248.7B (2020-2024)\r\n   � Growth Rate: 61.4% (2020-2024)\r\n   � Volatility: 77.8% (coefficient of variation)\r\n\r\nTOP 3 ITALIAN EXPORT SECTORS TO USA (2020-2024):\r\n   1. Machinery & Transport: EUR1056.9B (37.5% growth)\r\n   2. Chemicals & Related: EUR489.4B (48.1% growth)\r\n   3. Pharmaceuticals: EUR248.7B (61.4% growth)\r\n\r\nSTRATEGIC INSIGHTS:\r\n   � 10 of 10 sectors showing positive growth (2020-2024)\r\n   � Pharmaceuticals represent strategic high-growth sector\r\n   � Analysis based on complete years (2020-2024) to avoid incomplete 2025 data\r\n\r\n======================================================================\r\n\r\nMulti-sector visualizations completed!\r\nFiles created:\r\n   � plots/multi_sector_dashboard.png\r\n   � plots/sector_growth_performance.png\r","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"6400051e-ed8f-4b0c-b2a5-15807f1a6af2","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01CCmNxem48yXW4etHgste8B","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01PjfW9wKRM9EFPsmbQjrhaL","name":"Write","input":{"file_path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\create_excel_data.py","content":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef load_and_process_pharma_data():\n    \"\"\"Load and process pharmaceutical export data for Excel\"\"\"\n    df = pd.read_csv('data/ita_export_usa_world_historical_series.csv')\n    \n    # Clean and process the data\n    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    df['year'] = df['TIME_PERIOD'].dt.year\n    df['month'] = df['TIME_PERIOD'].dt.month\n    df['value_millions'] = df['OBS_VALUE'] / 1_000_000\n    \n    # Separate USA and World data\n    usa_data = df[df['PARTNER'].str.contains('United States', na=False)].copy()\n    world_data = df[df['PARTNER'].str.contains('All countries', na=False)].copy()\n    \n    # Sort by date\n    usa_data = usa_data.sort_values('TIME_PERIOD')\n    world_data = world_data.sort_values('TIME_PERIOD')\n    \n    return usa_data, world_data\n\ndef create_timeline_data(usa_data, world_data):\n    \"\"\"Create timeline chart data indexed to 2016\"\"\"\n    # Calculate annual data (exclude 2025 for complete comparison)\n    usa_annual = usa_data[usa_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data[world_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    # Index to 2016 (set 2016 = 100)\n    usa_2016_value = usa_annual[usa_annual['year'] == 2016]['value_millions'].values[0]\n    world_2016_value = world_annual[world_annual['year'] == 2016]['value_millions'].values[0]\n    \n    usa_annual['usa_indexed'] = (usa_annual['value_millions'] / usa_2016_value) * 100\n    world_annual['world_indexed'] = (world_annual['value_millions'] / world_2016_value) * 100\n    \n    # Merge data\n    timeline_data = pd.merge(usa_annual[['year', 'value_millions', 'usa_indexed']], \n                            world_annual[['year', 'value_millions', 'world_indexed']], \n                            on='year', suffixes=('_usa', '_world'))\n    \n    return timeline_data\n\ndef create_market_share_data(usa_data, world_data):\n    \"\"\"Create market share evolution data\"\"\"\n    # Calculate annual market share (exclude 2025)\n    usa_annual = usa_data[usa_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data[world_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    # Calculate market share\n    market_share_data = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    market_share_data['usa_share_percent'] = (market_share_data['value_millions_usa'] / market_share_data['value_millions_world']) * 100\n    \n    # Calculate average for reference line\n    avg_share = market_share_data['usa_share_percent'].mean()\n    market_share_data['average_share'] = avg_share\n    \n    return market_share_data\n\ndef create_growth_comparison_data(usa_data, world_data):\n    \"\"\"Create growth rate comparison data\"\"\"\n    # Calculate annual data\n    usa_annual = usa_data[usa_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data[world_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    annual_merged = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    annual_merged['rest_world'] = annual_merged['value_millions_world'] - annual_merged['value_millions_usa']\n    \n    # Calculate growth rates\n    annual_merged['usa_growth'] = annual_merged['value_millions_usa'].pct_change() * 100\n    annual_merged['world_growth'] = annual_merged['value_millions_world'].pct_change() * 100\n    annual_merged['rest_world_growth'] = annual_merged['rest_world'].pct_change() * 100\n    \n    # Remove first year (no growth data)\n    growth_data = annual_merged[annual_merged['year'] >= 2003].copy()\n    \n    return growth_data\n\ndef load_multi_sector_data():\n    \"\"\"Load and process multi-sector data\"\"\"\n    df = pd.read_csv('data/ita_export_usa_world_pharma_plus_other_sectors.csv')\n    \n    # Clean and process the data\n    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    df['year'] = df['TIME_PERIOD'].dt.year\n    df['value_billions'] = df['OBS_VALUE'] / 1_000_000_000\n    \n    # Clean product names\n    sector_mapping = {\n        'Food and live animals': 'Food & Live Animals',\n        'Beverages and tobacco': 'Beverages & Tobacco',\n        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n        'Machinery and transport equipment': 'Machinery & Transport',\n        'Beverages': 'Beverages',\n        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n        'Other transport equipment': 'Other Transport Equipment',\n        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    }\n    \n    df['sector_name'] = df['PRODUCT'].map(sector_mapping)\n    \n    return df\n\ndef create_multi_sector_dashboard_data(df):\n    \"\"\"Create multi-sector dashboard data for top 5 sectors\"\"\"\n    # Get complete years data (2002-2024)\n    complete_years_data = df[df['year'] <= 2024]\n    \n    # Get top 5 sectors by recent volume (2020-2024)\n    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)]\n    top_sectors = recent_data.groupby('PRODUCT')['value_billions'].sum().nlargest(5).index\n    \n    # Create timeline data for top 5 sectors\n    timeline_results = []\n    for product in top_sectors:\n        sector_data = complete_years_data[complete_years_data['PRODUCT'] == product].copy()\n        sector_annual = sector_data.groupby('year')['value_billions'].sum().reset_index()\n        sector_name = df[df['PRODUCT'] == product]['sector_name'].iloc[0]\n        sector_annual['sector'] = sector_name\n        timeline_results.append(sector_annual)\n    \n    timeline_data = pd.concat(timeline_results, ignore_index=True)\n    \n    # Create pie chart data (2020-2024 average)\n    recent_totals = recent_data.groupby('PRODUCT')['value_billions'].sum().reset_index()\n    recent_totals['sector_name'] = recent_totals['PRODUCT'].map({\n        'Food and live animals': 'Food & Live Animals',\n        'Beverages and tobacco': 'Beverages & Tobacco',\n        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n        'Machinery and transport equipment': 'Machinery & Transport',\n        'Beverages': 'Beverages',\n        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n        'Other transport equipment': 'Other Transport Equipment',\n        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    })\n    recent_totals = recent_totals.sort_values('value_billions', ascending=False)\n    \n    # Calculate percentages\n    total_value = recent_totals['value_billions'].sum()\n    recent_totals['percentage'] = (recent_totals['value_billions'] / total_value) * 100\n    \n    # Top 5 + Others\n    top_5_pie = recent_totals.head(5).copy()\n    others_total = recent_totals.tail(len(recent_totals)-5)['value_billions'].sum() if len(recent_totals) > 5 else 0\n    others_percent = (others_total / total_value) * 100 if total_value > 0 else 0\n    \n    if others_total > 0:\n        others_row = pd.DataFrame({\n            'PRODUCT': ['Others'],\n            'value_billions': [others_total],\n            'sector_name': ['Others'],\n            'percentage': [others_percent]\n        })\n        pie_data = pd.concat([top_5_pie, others_row], ignore_index=True)\n    else:\n        pie_data = top_5_pie\n    \n    return timeline_data, pie_data\n\ndef create_growth_performance_data(df):\n    \"\"\"Create sector growth performance data\"\"\"\n    # Focus on complete years only (2020-2024)\n    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)].copy()\n    \n    sector_stats = []\n    for product in df['PRODUCT'].unique():\n        sector_data = df[df['PRODUCT'] == product].copy()\n        \n        # Growth calculation (2020 vs 2024)\n        year_2020 = sector_data[sector_data['year'] == 2020]['value_billions'].sum()\n        year_2024 = sector_data[sector_data['year'] == 2024]['value_billions'].sum()\n        \n        if year_2020 > 0 and year_2024 > 0:\n            growth_rate = ((year_2024 / year_2020) - 1) * 100\n        else:\n            growth_rate = 0\n        \n        sector_name = df[df['PRODUCT'] == product]['sector_name'].iloc[0]\n        \n        # Total volume for 2020-2024\n        total_recent = recent_data[recent_data['PRODUCT'] == product]['value_billions'].sum()\n        \n        sector_stats.append({\n            'sector_name': sector_name,\n            'growth_rate_2020_2024': growth_rate,\n            'total_volume_2020_2024': total_recent\n        })\n    \n    growth_data = pd.DataFrame(sector_stats)\n    \n    # Exclude Beverages & Tobacco from display (as per original code)\n    growth_data = growth_data[growth_data['sector_name'] != 'Beverages & Tobacco']\n    growth_data = growth_data.sort_values('growth_rate_2020_2024', ascending=True)\n    \n    return growth_data\n\ndef main():\n    \"\"\"Create Excel file with all chart data\"\"\"\n    print(\"Creating Excel file with chart data...\")\n    \n    # Load pharmaceutical data\n    usa_data, world_data = load_and_process_pharma_data()\n    \n    # Create chart data\n    timeline_data = create_timeline_data(usa_data, world_data)\n    market_share_data = create_market_share_data(usa_data, world_data)\n    growth_comparison_data = create_growth_comparison_data(usa_data, world_data)\n    \n    # Load multi-sector data\n    multi_df = load_multi_sector_data()\n    dashboard_timeline, dashboard_pie = create_multi_sector_dashboard_data(multi_df)\n    growth_performance_data = create_growth_performance_data(multi_df)\n    \n    # Create Excel file\n    with pd.ExcelWriter('chart_data_for_excel.xlsx', engine='openpyxl') as writer:\n        \n        # Sheet 1: Timeline Chart Data\n        timeline_data.to_excel(writer, sheet_name='1_Timeline_Chart', index=False)\n        \n        # Sheet 2: Market Share Chart Data  \n        market_share_data.to_excel(writer, sheet_name='2_Market_Share_Chart', index=False)\n        \n        # Sheet 3: Growth Comparison Chart Data\n        growth_comparison_data.to_excel(writer, sheet_name='3_Growth_Comparison', index=False)\n        \n        # Sheet 4: Multi-Sector Dashboard - Timeline\n        dashboard_timeline.to_excel(writer, sheet_name='4_Dashboard_Timeline', index=False)\n        \n        # Sheet 5: Multi-Sector Dashboard - Pie Chart\n        dashboard_pie.to_excel(writer, sheet_name='5_Dashboard_Pie', index=False)\n        \n        # Sheet 6: Growth Performance Data\n        growth_performance_data.to_excel(writer, sheet_name='6_Growth_Performance', index=False)\n    \n    print(\"Excel file 'chart_data_for_excel.xlsx' created successfully!\")\n    print(\"\\nSheets created:\")\n    print(\"   • 1_Timeline_Chart - Data for timeline comparison\")\n    print(\"   • 2_Market_Share_Chart - Data for USA market share evolution\")\n    print(\"   • 3_Growth_Comparison - Data for annual growth rate comparison\")\n    print(\"   • 4_Dashboard_Timeline - Data for multi-sector timeline\")\n    print(\"   • 5_Dashboard_Pie - Data for sector market share pie chart\")\n    print(\"   • 6_Growth_Performance - Data for sector growth performance\")\n\nif __name__ == \"__main__\":\n    main()"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":665,"cache_read_input_tokens":33231,"output_tokens":3645,"service_tier":"standard"}},"requestId":"req_011CRrUCCAe7BWNHVAhnRnXf","type":"assistant","uuid":"db448437-f0ec-46a8-9a99-bc6fc0cf417d","timestamp":"2025-08-06T12:39:28.834Z"}
{"parentUuid":"db448437-f0ec-46a8-9a99-bc6fc0cf417d","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PjfW9wKRM9EFPsmbQjrhaL","type":"tool_result","content":"File created successfully at: C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\create_excel_data.py"}]},"uuid":"94044eb1-78e5-411f-836d-c809100674a7","timestamp":"2025-08-06T12:44:06.842Z","toolUseResult":{"type":"create","filePath":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\create_excel_data.py","content":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef load_and_process_pharma_data():\n    \"\"\"Load and process pharmaceutical export data for Excel\"\"\"\n    df = pd.read_csv('data/ita_export_usa_world_historical_series.csv')\n    \n    # Clean and process the data\n    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    df['year'] = df['TIME_PERIOD'].dt.year\n    df['month'] = df['TIME_PERIOD'].dt.month\n    df['value_millions'] = df['OBS_VALUE'] / 1_000_000\n    \n    # Separate USA and World data\n    usa_data = df[df['PARTNER'].str.contains('United States', na=False)].copy()\n    world_data = df[df['PARTNER'].str.contains('All countries', na=False)].copy()\n    \n    # Sort by date\n    usa_data = usa_data.sort_values('TIME_PERIOD')\n    world_data = world_data.sort_values('TIME_PERIOD')\n    \n    return usa_data, world_data\n\ndef create_timeline_data(usa_data, world_data):\n    \"\"\"Create timeline chart data indexed to 2016\"\"\"\n    # Calculate annual data (exclude 2025 for complete comparison)\n    usa_annual = usa_data[usa_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data[world_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    # Index to 2016 (set 2016 = 100)\n    usa_2016_value = usa_annual[usa_annual['year'] == 2016]['value_millions'].values[0]\n    world_2016_value = world_annual[world_annual['year'] == 2016]['value_millions'].values[0]\n    \n    usa_annual['usa_indexed'] = (usa_annual['value_millions'] / usa_2016_value) * 100\n    world_annual['world_indexed'] = (world_annual['value_millions'] / world_2016_value) * 100\n    \n    # Merge data\n    timeline_data = pd.merge(usa_annual[['year', 'value_millions', 'usa_indexed']], \n                            world_annual[['year', 'value_millions', 'world_indexed']], \n                            on='year', suffixes=('_usa', '_world'))\n    \n    return timeline_data\n\ndef create_market_share_data(usa_data, world_data):\n    \"\"\"Create market share evolution data\"\"\"\n    # Calculate annual market share (exclude 2025)\n    usa_annual = usa_data[usa_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data[world_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    # Calculate market share\n    market_share_data = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    market_share_data['usa_share_percent'] = (market_share_data['value_millions_usa'] / market_share_data['value_millions_world']) * 100\n    \n    # Calculate average for reference line\n    avg_share = market_share_data['usa_share_percent'].mean()\n    market_share_data['average_share'] = avg_share\n    \n    return market_share_data\n\ndef create_growth_comparison_data(usa_data, world_data):\n    \"\"\"Create growth rate comparison data\"\"\"\n    # Calculate annual data\n    usa_annual = usa_data[usa_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    world_annual = world_data[world_data['year'] <= 2024].groupby('year')['value_millions'].sum().reset_index()\n    \n    annual_merged = pd.merge(usa_annual, world_annual, on='year', suffixes=('_usa', '_world'))\n    annual_merged['rest_world'] = annual_merged['value_millions_world'] - annual_merged['value_millions_usa']\n    \n    # Calculate growth rates\n    annual_merged['usa_growth'] = annual_merged['value_millions_usa'].pct_change() * 100\n    annual_merged['world_growth'] = annual_merged['value_millions_world'].pct_change() * 100\n    annual_merged['rest_world_growth'] = annual_merged['rest_world'].pct_change() * 100\n    \n    # Remove first year (no growth data)\n    growth_data = annual_merged[annual_merged['year'] >= 2003].copy()\n    \n    return growth_data\n\ndef load_multi_sector_data():\n    \"\"\"Load and process multi-sector data\"\"\"\n    df = pd.read_csv('data/ita_export_usa_world_pharma_plus_other_sectors.csv')\n    \n    # Clean and process the data\n    df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'])\n    df['year'] = df['TIME_PERIOD'].dt.year\n    df['value_billions'] = df['OBS_VALUE'] / 1_000_000_000\n    \n    # Clean product names\n    sector_mapping = {\n        'Food and live animals': 'Food & Live Animals',\n        'Beverages and tobacco': 'Beverages & Tobacco',\n        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n        'Machinery and transport equipment': 'Machinery & Transport',\n        'Beverages': 'Beverages',\n        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n        'Other transport equipment': 'Other Transport Equipment',\n        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    }\n    \n    df['sector_name'] = df['PRODUCT'].map(sector_mapping)\n    \n    return df\n\ndef create_multi_sector_dashboard_data(df):\n    \"\"\"Create multi-sector dashboard data for top 5 sectors\"\"\"\n    # Get complete years data (2002-2024)\n    complete_years_data = df[df['year'] <= 2024]\n    \n    # Get top 5 sectors by recent volume (2020-2024)\n    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)]\n    top_sectors = recent_data.groupby('PRODUCT')['value_billions'].sum().nlargest(5).index\n    \n    # Create timeline data for top 5 sectors\n    timeline_results = []\n    for product in top_sectors:\n        sector_data = complete_years_data[complete_years_data['PRODUCT'] == product].copy()\n        sector_annual = sector_data.groupby('year')['value_billions'].sum().reset_index()\n        sector_name = df[df['PRODUCT'] == product]['sector_name'].iloc[0]\n        sector_annual['sector'] = sector_name\n        timeline_results.append(sector_annual)\n    \n    timeline_data = pd.concat(timeline_results, ignore_index=True)\n    \n    # Create pie chart data (2020-2024 average)\n    recent_totals = recent_data.groupby('PRODUCT')['value_billions'].sum().reset_index()\n    recent_totals['sector_name'] = recent_totals['PRODUCT'].map({\n        'Food and live animals': 'Food & Live Animals',\n        'Beverages and tobacco': 'Beverages & Tobacco',\n        'Chemicals and related products, n.e.s.': 'Chemicals & Related',\n        'Machinery and transport equipment': 'Machinery & Transport',\n        'Beverages': 'Beverages',\n        'Medicinal and pharmaceutical products': 'Pharmaceuticals',\n        'Textile yarn, fabrics, made-up articles, n.e.s., and related products': 'Textiles',\n        'Road vehicles (including air-cushion vehicles)': 'Road Vehicles',\n        'Other transport equipment': 'Other Transport Equipment',\n        'Articles of apparel and clothing accessories': 'Apparel & Clothing'\n    })\n    recent_totals = recent_totals.sort_values('value_billions', ascending=False)\n    \n    # Calculate percentages\n    total_value = recent_totals['value_billions'].sum()\n    recent_totals['percentage'] = (recent_totals['value_billions'] / total_value) * 100\n    \n    # Top 5 + Others\n    top_5_pie = recent_totals.head(5).copy()\n    others_total = recent_totals.tail(len(recent_totals)-5)['value_billions'].sum() if len(recent_totals) > 5 else 0\n    others_percent = (others_total / total_value) * 100 if total_value > 0 else 0\n    \n    if others_total > 0:\n        others_row = pd.DataFrame({\n            'PRODUCT': ['Others'],\n            'value_billions': [others_total],\n            'sector_name': ['Others'],\n            'percentage': [others_percent]\n        })\n        pie_data = pd.concat([top_5_pie, others_row], ignore_index=True)\n    else:\n        pie_data = top_5_pie\n    \n    return timeline_data, pie_data\n\ndef create_growth_performance_data(df):\n    \"\"\"Create sector growth performance data\"\"\"\n    # Focus on complete years only (2020-2024)\n    recent_data = df[(df['year'] >= 2020) & (df['year'] <= 2024)].copy()\n    \n    sector_stats = []\n    for product in df['PRODUCT'].unique():\n        sector_data = df[df['PRODUCT'] == product].copy()\n        \n        # Growth calculation (2020 vs 2024)\n        year_2020 = sector_data[sector_data['year'] == 2020]['value_billions'].sum()\n        year_2024 = sector_data[sector_data['year'] == 2024]['value_billions'].sum()\n        \n        if year_2020 > 0 and year_2024 > 0:\n            growth_rate = ((year_2024 / year_2020) - 1) * 100\n        else:\n            growth_rate = 0\n        \n        sector_name = df[df['PRODUCT'] == product]['sector_name'].iloc[0]\n        \n        # Total volume for 2020-2024\n        total_recent = recent_data[recent_data['PRODUCT'] == product]['value_billions'].sum()\n        \n        sector_stats.append({\n            'sector_name': sector_name,\n            'growth_rate_2020_2024': growth_rate,\n            'total_volume_2020_2024': total_recent\n        })\n    \n    growth_data = pd.DataFrame(sector_stats)\n    \n    # Exclude Beverages & Tobacco from display (as per original code)\n    growth_data = growth_data[growth_data['sector_name'] != 'Beverages & Tobacco']\n    growth_data = growth_data.sort_values('growth_rate_2020_2024', ascending=True)\n    \n    return growth_data\n\ndef main():\n    \"\"\"Create Excel file with all chart data\"\"\"\n    print(\"Creating Excel file with chart data...\")\n    \n    # Load pharmaceutical data\n    usa_data, world_data = load_and_process_pharma_data()\n    \n    # Create chart data\n    timeline_data = create_timeline_data(usa_data, world_data)\n    market_share_data = create_market_share_data(usa_data, world_data)\n    growth_comparison_data = create_growth_comparison_data(usa_data, world_data)\n    \n    # Load multi-sector data\n    multi_df = load_multi_sector_data()\n    dashboard_timeline, dashboard_pie = create_multi_sector_dashboard_data(multi_df)\n    growth_performance_data = create_growth_performance_data(multi_df)\n    \n    # Create Excel file\n    with pd.ExcelWriter('chart_data_for_excel.xlsx', engine='openpyxl') as writer:\n        \n        # Sheet 1: Timeline Chart Data\n        timeline_data.to_excel(writer, sheet_name='1_Timeline_Chart', index=False)\n        \n        # Sheet 2: Market Share Chart Data  \n        market_share_data.to_excel(writer, sheet_name='2_Market_Share_Chart', index=False)\n        \n        # Sheet 3: Growth Comparison Chart Data\n        growth_comparison_data.to_excel(writer, sheet_name='3_Growth_Comparison', index=False)\n        \n        # Sheet 4: Multi-Sector Dashboard - Timeline\n        dashboard_timeline.to_excel(writer, sheet_name='4_Dashboard_Timeline', index=False)\n        \n        # Sheet 5: Multi-Sector Dashboard - Pie Chart\n        dashboard_pie.to_excel(writer, sheet_name='5_Dashboard_Pie', index=False)\n        \n        # Sheet 6: Growth Performance Data\n        growth_performance_data.to_excel(writer, sheet_name='6_Growth_Performance', index=False)\n    \n    print(\"Excel file 'chart_data_for_excel.xlsx' created successfully!\")\n    print(\"\\nSheets created:\")\n    print(\"   • 1_Timeline_Chart - Data for timeline comparison\")\n    print(\"   • 2_Market_Share_Chart - Data for USA market share evolution\")\n    print(\"   • 3_Growth_Comparison - Data for annual growth rate comparison\")\n    print(\"   • 4_Dashboard_Timeline - Data for multi-sector timeline\")\n    print(\"   • 5_Dashboard_Pie - Data for sector market share pie chart\")\n    print(\"   • 6_Growth_Performance - Data for sector growth performance\")\n\nif __name__ == \"__main__\":\n    main()","structuredPatch":[]}}
{"parentUuid":"94044eb1-78e5-411f-836d-c809100674a7","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01AXYX1u3KjhGaFy5wqDREkQ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_016xpUZEhT6sbqqVSt25gtbH","name":"Bash","input":{"command":"uv add openpyxl","description":"Add openpyxl dependency for Excel export"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":37587,"cache_read_input_tokens":0,"output_tokens":85,"service_tier":"standard"}},"requestId":"req_011CRrUcFE756gQVRMxFXE9i","type":"assistant","uuid":"6c102912-f3db-48be-be8d-453db8c733d5","timestamp":"2025-08-06T12:44:11.421Z"}
{"parentUuid":"6c102912-f3db-48be-be8d-453db8c733d5","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_016xpUZEhT6sbqqVSt25gtbH","type":"tool_result","content":"Resolved 28 packages in 1ms\nAudited 24 packages in 0.02ms","is_error":false}]},"uuid":"2dfd97a7-4353-4fd4-ac4d-98394ead24ad","timestamp":"2025-08-06T12:44:12.359Z","toolUseResult":{"stdout":"Resolved 28 packages in 1ms\nAudited 24 packages in 0.02ms\r","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"2dfd97a7-4353-4fd4-ac4d-98394ead24ad","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01Tb7bpKTPyY7pfkRepVQbFE","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01KHUCKR21aF2a3JaMn2oPdG","name":"Bash","input":{"command":"uv run create_excel_data.py","description":"Generate Excel file with chart data"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":121,"cache_read_input_tokens":37587,"output_tokens":83,"service_tier":"standard"}},"requestId":"req_011CRrUce2JtwJW6dEbvzHks","type":"assistant","uuid":"03aa082a-35d2-4762-8776-428c913f3710","timestamp":"2025-08-06T12:44:15.769Z"}
{"parentUuid":"03aa082a-35d2-4762-8776-428c913f3710","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01KHUCKR21aF2a3JaMn2oPdG","type":"tool_result","content":"Creating Excel file with chart data...\r\nExcel file 'chart_data_for_excel.xlsx' created successfully!\r\n\r\nSheets created:\r\n   � 1_Timeline_Chart - Data for timeline comparison\r\n   � 2_Market_Share_Chart - Data for USA market share evolution\r\n   � 3_Growth_Comparison - Data for annual growth rate comparison\r\n   � 4_Dashboard_Timeline - Data for multi-sector timeline\r\n   � 5_Dashboard_Pie - Data for sector market share pie chart\r\n   � 6_Growth_Performance - Data for sector growth performance","is_error":false}]},"uuid":"c421ae50-8515-49f4-9a58-005bb9b56ead","timestamp":"2025-08-06T12:44:19.629Z","toolUseResult":{"stdout":"Creating Excel file with chart data...\r\nExcel file 'chart_data_for_excel.xlsx' created successfully!\r\n\r\nSheets created:\r\n   � 1_Timeline_Chart - Data for timeline comparison\r\n   � 2_Market_Share_Chart - Data for USA market share evolution\r\n   � 3_Growth_Comparison - Data for annual growth rate comparison\r\n   � 4_Dashboard_Timeline - Data for multi-sector timeline\r\n   � 5_Dashboard_Pie - Data for sector market share pie chart\r\n   � 6_Growth_Performance - Data for sector growth performance\r","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"c421ae50-8515-49f4-9a58-005bb9b56ead","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01Gh3ob5eHzo4Hybb7BPLXJe","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017hQcghGFmzaEqowt6E7pHE","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed"},{"id":"2","content":"Extract data from Python scripts to understand chart data sources","status":"completed"},{"id":"3","content":"Create Excel file with separate sheets for each plot's data","status":"completed"},{"id":"4","content":"Create Italian instructions file for recreating charts in Excel","status":"in_progress"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":223,"cache_read_input_tokens":37708,"output_tokens":169,"service_tier":"standard"}},"requestId":"req_011CRrUdB2Nrw2WwZPr4Vb1r","type":"assistant","uuid":"1662e034-f75a-4cd4-abc5-9383f4190fa3","timestamp":"2025-08-06T12:44:25.801Z"}
{"parentUuid":"1662e034-f75a-4cd4-abc5-9383f4190fa3","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017hQcghGFmzaEqowt6E7pHE","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"f3eba111-09bf-4577-a49e-bb850bdbf566","timestamp":"2025-08-06T12:44:25.889Z","toolUseResult":{"oldTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"completed","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"in_progress","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"pending","id":"4"}],"newTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"completed","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"completed","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"in_progress","id":"4"}]}}
{"parentUuid":"f3eba111-09bf-4577-a49e-bb850bdbf566","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01KdxSWBijHbv1Vt83epFAjq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01BqdvN95WaVFJTUZMtGLaH4","name":"Write","input":{"file_path":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\Istruzioni_Grafici_Excel.md","content":"# Istruzioni per Ricreare i Grafici in Excel\n\n## File Dati\nIl file `chart_data_for_excel.xlsx` contiene 6 fogli con i dati per ricreare tutti i grafici.\n\n---\n\n## GRAFICO 1: Timeline di Confronto - Esportazioni Farmaceutiche (Foglio: 1_Timeline_Chart)\n\n### Dati da Utilizzare:\n- **Colonna X (Asse orizzontale)**: `year` (anni 2002-2024)\n- **Serie 1**: `usa_indexed` - Esportazioni USA (base 2016=100)\n- **Serie 2**: `world_indexed` - Esportazioni Mondiali (base 2016=100)\n\n### Procedura:\n1. Seleziona tutti i dati del foglio \"1_Timeline_Chart\"\n2. Inserisci > Grafici > Grafico a linee > Linee con indicatori\n3. **Formattazione Assi**:\n   - Asse X: Etichetta \"Anno\"\n   - Asse Y: Etichetta \"Indice Esportazioni (2016 = 100)\"\n4. **Formattazione Serie**:\n   - Serie USA: Colore blu scuro (#002868), linea spessa (2,5 pt), marcatori rotondi\n   - Serie Mondiale: Colore verde (#009246), linea spessa (2,5 pt), marcatori quadrati\n5. **Legenda**: \n   - Serie 1: \"Esportazioni USA (2016 = 100)\"\n   - Serie 2: \"Esportazioni Mondiali Totali (2016 = 100)\"\n6. **Titolo**: \"Esportazioni Farmaceutiche Italiane: USA vs Mondo\\n(Dati Annuali Indicizzati al 2016, 2002-2024)\"\n7. **Evidenziazione**: Aggiungi area ombreggiata dal 2017 al 2021 (periodo Trump) con colore rosso chiaro (#CE2B37) trasparenza 90%\n8. Attiva griglia principale con trasparenza 70%\n\n---\n\n## GRAFICO 2: Evoluzione Quota di Mercato USA (Foglio: 2_Market_Share_Chart)\n\n### Dati da Utilizzare:\n- **Colonna X**: `year` (anni 2002-2024)\n- **Serie 1**: `usa_share_percent` - Percentuale quota USA\n- **Linea di riferimento**: `average_share` - Media storica\n\n### Procedura:\n1. Seleziona colonne `year` e `usa_share_percent`\n2. Inserisci > Grafici > Grafico ad area > Area con linee lisce\n3. **Formattazione**:\n   - Area: Colore blu (#002868) con trasparenza 70%\n   - Linea: Colore blu (#002868), spessore 2,5 pt, marcatori rotondi\n4. **Assi**:\n   - Asse X: \"Anno\"\n   - Asse Y: \"Quota di Mercato USA (%)\"\n5. **Linea Media**: Aggiungi linea orizzontale al valore medio (16,6%) con colore rosso (#CE2B37), linea tratteggiata\n6. **Titolo**: \"Quota USA delle Esportazioni Farmaceutiche Italiane\\n(Dati Annuali 2002-2024)\"\n7. **Evidenziazione**: Aggiungi area ombreggiata dal 2017 al 2021 con colore rosso chiaro trasparenza 90%\n8. **Legenda**: Includi \"Media: 16,6%\" per la linea di riferimento\n\n---\n\n## GRAFICO 3: Confronto Tassi di Crescita (Foglio: 3_Growth_Comparison)\n\n### Dati da Utilizzare:\n- **Colonna X**: `year` (anni 2003-2024)\n- **Serie 1**: `usa_growth` - Crescita annuale USA (%)\n- **Serie 2**: `rest_world_growth` - Crescita resto del mondo (%)\n\n### Procedura:\n1. Seleziona colonne `year`, `usa_growth`, `rest_world_growth`\n2. Inserisci > Grafici > Istogramma a colonne > Colonne raggruppate\n3. **Formattazione Serie**:\n   - Serie USA: Colore blu (#002868), trasparenza 20%\n   - Serie Resto del Mondo: Colore rosso (#CE2B37), trasparenza 20%\n4. **Assi**:\n   - Asse X: \"Anno\", etichette inclinate 45 gradi\n   - Asse Y: \"Tasso di Crescita Annuale (%)\"\n5. **Linea Zero**: Aggiungi linea orizzontale allo 0% colore nero\n6. **Titolo**: \"Tassi di Crescita Esportazioni Farmaceutiche Italiane\\n(Variazione % Anno su Anno 2003-2024)\"\n7. **Legenda**: \n   - \"USA\"\n   - \"Resto del Mondo\"\n8. Attiva griglia orizzontale con trasparenza 70%\n\n---\n\n## GRAFICO 4: Dashboard Multi-Settoriale - Timeline (Foglio: 4_Dashboard_Timeline)\n\n### Dati da Utilizzare:\n- Creare tabella pivot: Righe=`year`, Colonne=`sector`, Valori=`value_billions`\n- Oppure usare i dati come forniti con 5 serie separate\n\n### Procedura:\n1. Seleziona tutti i dati del foglio \"4_Dashboard_Timeline\"\n2. Inserisci > Grafici > Grafico a linee > Linee lisse con indicatori\n3. **Formattazione Serie** (5 settori principali):\n   - Machinery & Transport: Verde (#009246)\n   - Chemicals & Related: Rosso (#CE2B37)  \n   - Pharmaceuticals: Blu (#002868)\n   - Food & Live Animals: Arancione (#FF6B35)\n   - Textiles: Marrone (#8B4513)\n4. **Assi**:\n   - Asse X: \"Anno\"\n   - Asse Y: \"Valore Esportazioni (EUR miliardi)\"\n5. **Titolo**: \"Evoluzione Esportazioni Italiane negli USA per Settore\\n(Totali Annuali 2002-2024)\"\n6. **Legenda**: Posiziona in alto a sinistra\n7. Tutte le linee spessore 2,5 pt\n8. Attiva griglia con trasparenza 70%\n\n---\n\n## GRAFICO 5: Dashboard Multi-Settoriale - Grafico a Torta (Foglio: 5_Dashboard_Pie)\n\n### Dati da Utilizzare:\n- **Etichette**: `sector_name`\n- **Valori**: `percentage`\n\n### Procedura:\n1. Seleziona colonne `sector_name` e `percentage`\n2. Inserisci > Grafici > Grafico a torta > Torta 2D\n3. **Formattazione Colori** (seguire ordine dei settori):\n   - Machinery & Transport: Verde (#009246)\n   - Chemicals & Related: Rosso (#CE2B37)\n   - Pharmaceuticals: Blu (#002868)  \n   - Food & Live Animals: Arancione (#FF6B35)\n   - Textiles: Marrone (#8B4513)\n   - Others: Oro scuro (#B8860B)\n4. **Etichette**: Mostra percentuali con 1 decimale\n5. **Titolo**: \"Quota di Mercato per Settore\\n(Media 2020-2024)\"\n6. **Posizione inizio**: 90 gradi (ore 12)\n7. **Esplosione**: Evidenzia il settore Pharmaceuticals con leggera separazione (10%)\n\n---\n\n## GRAFICO 6: Performance di Crescita Settoriale (Foglio: 6_Growth_Performance)\n\n### Dati da Utilizzare:\n- **Colonna Y**: `sector_name` (settori)\n- **Colonna X**: `growth_rate_2020_2024` (tasso di crescita %)\n\n### Procedura:\n1. Seleziona colonne `sector_name` e `growth_rate_2020_2024`\n2. Inserisci > Grafici > Grafico a barre > Barre orizzontali\n3. **Formattazione Colori**:\n   - Pharmaceuticals: Rosso (#CE2B37), trasparenza 20%\n   - Altri settori: Verde (#009246), trasparenza 20%\n4. **Assi**:\n   - Asse X: \"Tasso di Crescita 2020-2024 (%)\"\n   - Asse Y: Nomi settori\n5. **Linea Zero**: Aggiungi linea verticale allo 0% colore nero\n6. **Titolo**: \"Settori Esportazione Italiana negli USA - Performance di Crescita\\n(2020-2024, Esclusi Bevande & Tabacco)\"\n7. **Etichette Dati**: Mostra valori percentuali sulle barre con 1 decimale\n8. **Legenda**: \n   - \"Prodotti Farmaceutici\"\n   - \"Altri Settori\"\n9. Attiva griglia verticale con trasparenza 70%\n\n---\n\n## Colori di Riferimento (Codici Hex):\n\n### Colori Italia:\n- **Verde Italia**: #009246\n- **Bianco Italia**: #FFFFFF\n- **Rosso Italia**: #CE2B37\n\n### Colori USA:\n- **Blu USA**: #002868\n\n### Colori Aggiuntivi:\n- **Arancione**: #FF6B35\n- **Marrone**: #8B4513\n- **Viola**: #4B0082\n- **Verde Scuro**: #228B22\n- **Cremisi**: #DC143C\n- **Blu Navy**: #00008B\n- **Oro Scuro**: #B8860B\n\n---\n\n## Note Generali:\n\n1. **Font**: Usa font sans-serif (Arial o Calibri) dimensione 11pt per il testo generale, 14-16pt per i titoli\n2. **Griglia**: Attiva sempre la griglia principale con trasparenza 70%\n3. **Bordi**: Evita bordi spessi, usa linee sottili dove necessario\n4. **Legenda**: Posiziona in modo che non copra i dati importanti\n5. **Margini**: Lascia spazio adeguato attorno ai grafici per la lettura\n6. **Salvataggio**: Salva i grafici come immagini ad alta risoluzione (300 DPI) per la presentazione\n\n---\n\n## Verifiche Finali:\n\n- [ ] Tutti i colori corrispondono al schema Italia/USA\n- [ ] I titoli sono completi e informativi\n- [ ] Le leggende sono chiare e posizionate correttamente\n- [ ] Gli assi hanno etichette appropriate\n- [ ] I dati sono visualizzati correttamente senza errori\n- [ ] La formattazione e' coerente tra tutti i grafici"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":355,"cache_read_input_tokens":37931,"output_tokens":2999,"service_tier":"standard"}},"requestId":"req_011CRrUdewQEhHQVrvEsafvN","type":"assistant","uuid":"65f63824-51e6-4576-8ee5-d91b875abf98","timestamp":"2025-08-06T12:45:18.066Z"}
{"parentUuid":"65f63824-51e6-4576-8ee5-d91b875abf98","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01BqdvN95WaVFJTUZMtGLaH4","type":"tool_result","content":"File created successfully at: C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\Istruzioni_Grafici_Excel.md"}]},"uuid":"b98403f6-57d0-4496-948c-66caf5f81e1b","timestamp":"2025-08-06T12:45:18.148Z","toolUseResult":{"type":"create","filePath":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US\\Istruzioni_Grafici_Excel.md","content":"# Istruzioni per Ricreare i Grafici in Excel\n\n## File Dati\nIl file `chart_data_for_excel.xlsx` contiene 6 fogli con i dati per ricreare tutti i grafici.\n\n---\n\n## GRAFICO 1: Timeline di Confronto - Esportazioni Farmaceutiche (Foglio: 1_Timeline_Chart)\n\n### Dati da Utilizzare:\n- **Colonna X (Asse orizzontale)**: `year` (anni 2002-2024)\n- **Serie 1**: `usa_indexed` - Esportazioni USA (base 2016=100)\n- **Serie 2**: `world_indexed` - Esportazioni Mondiali (base 2016=100)\n\n### Procedura:\n1. Seleziona tutti i dati del foglio \"1_Timeline_Chart\"\n2. Inserisci > Grafici > Grafico a linee > Linee con indicatori\n3. **Formattazione Assi**:\n   - Asse X: Etichetta \"Anno\"\n   - Asse Y: Etichetta \"Indice Esportazioni (2016 = 100)\"\n4. **Formattazione Serie**:\n   - Serie USA: Colore blu scuro (#002868), linea spessa (2,5 pt), marcatori rotondi\n   - Serie Mondiale: Colore verde (#009246), linea spessa (2,5 pt), marcatori quadrati\n5. **Legenda**: \n   - Serie 1: \"Esportazioni USA (2016 = 100)\"\n   - Serie 2: \"Esportazioni Mondiali Totali (2016 = 100)\"\n6. **Titolo**: \"Esportazioni Farmaceutiche Italiane: USA vs Mondo\\n(Dati Annuali Indicizzati al 2016, 2002-2024)\"\n7. **Evidenziazione**: Aggiungi area ombreggiata dal 2017 al 2021 (periodo Trump) con colore rosso chiaro (#CE2B37) trasparenza 90%\n8. Attiva griglia principale con trasparenza 70%\n\n---\n\n## GRAFICO 2: Evoluzione Quota di Mercato USA (Foglio: 2_Market_Share_Chart)\n\n### Dati da Utilizzare:\n- **Colonna X**: `year` (anni 2002-2024)\n- **Serie 1**: `usa_share_percent` - Percentuale quota USA\n- **Linea di riferimento**: `average_share` - Media storica\n\n### Procedura:\n1. Seleziona colonne `year` e `usa_share_percent`\n2. Inserisci > Grafici > Grafico ad area > Area con linee lisce\n3. **Formattazione**:\n   - Area: Colore blu (#002868) con trasparenza 70%\n   - Linea: Colore blu (#002868), spessore 2,5 pt, marcatori rotondi\n4. **Assi**:\n   - Asse X: \"Anno\"\n   - Asse Y: \"Quota di Mercato USA (%)\"\n5. **Linea Media**: Aggiungi linea orizzontale al valore medio (16,6%) con colore rosso (#CE2B37), linea tratteggiata\n6. **Titolo**: \"Quota USA delle Esportazioni Farmaceutiche Italiane\\n(Dati Annuali 2002-2024)\"\n7. **Evidenziazione**: Aggiungi area ombreggiata dal 2017 al 2021 con colore rosso chiaro trasparenza 90%\n8. **Legenda**: Includi \"Media: 16,6%\" per la linea di riferimento\n\n---\n\n## GRAFICO 3: Confronto Tassi di Crescita (Foglio: 3_Growth_Comparison)\n\n### Dati da Utilizzare:\n- **Colonna X**: `year` (anni 2003-2024)\n- **Serie 1**: `usa_growth` - Crescita annuale USA (%)\n- **Serie 2**: `rest_world_growth` - Crescita resto del mondo (%)\n\n### Procedura:\n1. Seleziona colonne `year`, `usa_growth`, `rest_world_growth`\n2. Inserisci > Grafici > Istogramma a colonne > Colonne raggruppate\n3. **Formattazione Serie**:\n   - Serie USA: Colore blu (#002868), trasparenza 20%\n   - Serie Resto del Mondo: Colore rosso (#CE2B37), trasparenza 20%\n4. **Assi**:\n   - Asse X: \"Anno\", etichette inclinate 45 gradi\n   - Asse Y: \"Tasso di Crescita Annuale (%)\"\n5. **Linea Zero**: Aggiungi linea orizzontale allo 0% colore nero\n6. **Titolo**: \"Tassi di Crescita Esportazioni Farmaceutiche Italiane\\n(Variazione % Anno su Anno 2003-2024)\"\n7. **Legenda**: \n   - \"USA\"\n   - \"Resto del Mondo\"\n8. Attiva griglia orizzontale con trasparenza 70%\n\n---\n\n## GRAFICO 4: Dashboard Multi-Settoriale - Timeline (Foglio: 4_Dashboard_Timeline)\n\n### Dati da Utilizzare:\n- Creare tabella pivot: Righe=`year`, Colonne=`sector`, Valori=`value_billions`\n- Oppure usare i dati come forniti con 5 serie separate\n\n### Procedura:\n1. Seleziona tutti i dati del foglio \"4_Dashboard_Timeline\"\n2. Inserisci > Grafici > Grafico a linee > Linee lisse con indicatori\n3. **Formattazione Serie** (5 settori principali):\n   - Machinery & Transport: Verde (#009246)\n   - Chemicals & Related: Rosso (#CE2B37)  \n   - Pharmaceuticals: Blu (#002868)\n   - Food & Live Animals: Arancione (#FF6B35)\n   - Textiles: Marrone (#8B4513)\n4. **Assi**:\n   - Asse X: \"Anno\"\n   - Asse Y: \"Valore Esportazioni (EUR miliardi)\"\n5. **Titolo**: \"Evoluzione Esportazioni Italiane negli USA per Settore\\n(Totali Annuali 2002-2024)\"\n6. **Legenda**: Posiziona in alto a sinistra\n7. Tutte le linee spessore 2,5 pt\n8. Attiva griglia con trasparenza 70%\n\n---\n\n## GRAFICO 5: Dashboard Multi-Settoriale - Grafico a Torta (Foglio: 5_Dashboard_Pie)\n\n### Dati da Utilizzare:\n- **Etichette**: `sector_name`\n- **Valori**: `percentage`\n\n### Procedura:\n1. Seleziona colonne `sector_name` e `percentage`\n2. Inserisci > Grafici > Grafico a torta > Torta 2D\n3. **Formattazione Colori** (seguire ordine dei settori):\n   - Machinery & Transport: Verde (#009246)\n   - Chemicals & Related: Rosso (#CE2B37)\n   - Pharmaceuticals: Blu (#002868)  \n   - Food & Live Animals: Arancione (#FF6B35)\n   - Textiles: Marrone (#8B4513)\n   - Others: Oro scuro (#B8860B)\n4. **Etichette**: Mostra percentuali con 1 decimale\n5. **Titolo**: \"Quota di Mercato per Settore\\n(Media 2020-2024)\"\n6. **Posizione inizio**: 90 gradi (ore 12)\n7. **Esplosione**: Evidenzia il settore Pharmaceuticals con leggera separazione (10%)\n\n---\n\n## GRAFICO 6: Performance di Crescita Settoriale (Foglio: 6_Growth_Performance)\n\n### Dati da Utilizzare:\n- **Colonna Y**: `sector_name` (settori)\n- **Colonna X**: `growth_rate_2020_2024` (tasso di crescita %)\n\n### Procedura:\n1. Seleziona colonne `sector_name` e `growth_rate_2020_2024`\n2. Inserisci > Grafici > Grafico a barre > Barre orizzontali\n3. **Formattazione Colori**:\n   - Pharmaceuticals: Rosso (#CE2B37), trasparenza 20%\n   - Altri settori: Verde (#009246), trasparenza 20%\n4. **Assi**:\n   - Asse X: \"Tasso di Crescita 2020-2024 (%)\"\n   - Asse Y: Nomi settori\n5. **Linea Zero**: Aggiungi linea verticale allo 0% colore nero\n6. **Titolo**: \"Settori Esportazione Italiana negli USA - Performance di Crescita\\n(2020-2024, Esclusi Bevande & Tabacco)\"\n7. **Etichette Dati**: Mostra valori percentuali sulle barre con 1 decimale\n8. **Legenda**: \n   - \"Prodotti Farmaceutici\"\n   - \"Altri Settori\"\n9. Attiva griglia verticale con trasparenza 70%\n\n---\n\n## Colori di Riferimento (Codici Hex):\n\n### Colori Italia:\n- **Verde Italia**: #009246\n- **Bianco Italia**: #FFFFFF\n- **Rosso Italia**: #CE2B37\n\n### Colori USA:\n- **Blu USA**: #002868\n\n### Colori Aggiuntivi:\n- **Arancione**: #FF6B35\n- **Marrone**: #8B4513\n- **Viola**: #4B0082\n- **Verde Scuro**: #228B22\n- **Cremisi**: #DC143C\n- **Blu Navy**: #00008B\n- **Oro Scuro**: #B8860B\n\n---\n\n## Note Generali:\n\n1. **Font**: Usa font sans-serif (Arial o Calibri) dimensione 11pt per il testo generale, 14-16pt per i titoli\n2. **Griglia**: Attiva sempre la griglia principale con trasparenza 70%\n3. **Bordi**: Evita bordi spessi, usa linee sottili dove necessario\n4. **Legenda**: Posiziona in modo che non copra i dati importanti\n5. **Margini**: Lascia spazio adeguato attorno ai grafici per la lettura\n6. **Salvataggio**: Salva i grafici come immagini ad alta risoluzione (300 DPI) per la presentazione\n\n---\n\n## Verifiche Finali:\n\n- [ ] Tutti i colori corrispondono al schema Italia/USA\n- [ ] I titoli sono completi e informativi\n- [ ] Le leggende sono chiare e posizionate correttamente\n- [ ] Gli assi hanno etichette appropriate\n- [ ] I dati sono visualizzati correttamente senza errori\n- [ ] La formattazione e' coerente tra tutti i grafici","structuredPatch":[]}}
{"parentUuid":"b98403f6-57d0-4496-948c-66caf5f81e1b","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_013ASQxDmNxnrn65c2p1hxgF","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SYzyPXvYaBbP1YPaf2129d","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed"},{"id":"2","content":"Extract data from Python scripts to understand chart data sources","status":"completed"},{"id":"3","content":"Create Excel file with separate sheets for each plot's data","status":"completed"},{"id":"4","content":"Create Italian instructions file for recreating charts in Excel","status":"completed"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":3051,"cache_read_input_tokens":38286,"output_tokens":167,"service_tier":"standard"}},"requestId":"req_011CRrUhV4wXrDXqL18rtv4M","type":"assistant","uuid":"3da86302-9248-49f5-ae32-5016ffb7d9e6","timestamp":"2025-08-06T12:45:21.711Z"}
{"parentUuid":"3da86302-9248-49f5-ae32-5016ffb7d9e6","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01SYzyPXvYaBbP1YPaf2129d","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"04282123-889f-4342-b33f-1b81bf0325e5","timestamp":"2025-08-06T12:45:21.753Z","toolUseResult":{"oldTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"completed","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"completed","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"in_progress","id":"4"}],"newTodos":[{"content":"Analyze existing plots in plots/ folder to understand data structure","status":"completed","id":"1"},{"content":"Extract data from Python scripts to understand chart data sources","status":"completed","id":"2"},{"content":"Create Excel file with separate sheets for each plot's data","status":"completed","id":"3"},{"content":"Create Italian instructions file for recreating charts in Excel","status":"completed","id":"4"}]}}
{"parentUuid":"04282123-889f-4342-b33f-1b81bf0325e5","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01B9YJEB58RtX6k7eVikdNkP","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_012nEUAVmXAnH3PCyf86bakC","name":"Bash","input":{"command":"git add chart_data_for_excel.xlsx create_excel_data.py Istruzioni_Grafici_Excel.md","description":"Stage new files for commit"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":351,"cache_read_input_tokens":41337,"output_tokens":102,"service_tier":"standard"}},"requestId":"req_011CRrUhk9J7wdrNgu22UA5S","type":"assistant","uuid":"01be7247-717f-47a8-997b-48e898006c57","timestamp":"2025-08-06T12:45:25.395Z"}
{"parentUuid":"01be7247-717f-47a8-997b-48e898006c57","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012nEUAVmXAnH3PCyf86bakC","type":"tool_result","content":"warning: in the working copy of 'Istruzioni_Grafici_Excel.md', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'create_excel_data.py', LF will be replaced by CRLF the next time Git touches it","is_error":false}]},"uuid":"98a9483b-ea90-4277-9aee-2dd5d0a08e29","timestamp":"2025-08-06T12:45:42.794Z","toolUseResult":{"stdout":"warning: in the working copy of 'Istruzioni_Grafici_Excel.md', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'create_excel_data.py', LF will be replaced by CRLF the next time Git touches it\r","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"98a9483b-ea90-4277-9aee-2dd5d0a08e29","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_016uN6q1YUmC2sbYhdBsMeou","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_019DEHP31uQTPwrJdMAhVjD9","name":"Bash","input":{"command":"git commit -m \"$(cat <<'EOF'\nAdd Excel export functionality with Italian instructions\n\nCreated Excel file with 6 sheets containing all chart data:\n- Timeline comparison data (indexed to 2016)\n- Market share evolution data\n- Growth rate comparison data  \n- Multi-sector dashboard timeline data\n- Multi-sector pie chart data\n- Sector growth performance data\n\nAdded comprehensive Italian instructions for recreating charts in Excel\nwith exact formatting, colors, and styling specifications.\n\nGenerated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\"","description":"Commit Excel export functionality"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":186,"cache_read_input_tokens":41688,"output_tokens":213,"service_tier":"standard"}},"requestId":"req_011CRrUjJk8saDrWCHGkuBp2","type":"assistant","uuid":"f2b15874-a804-4eaf-a330-fd693938719d","timestamp":"2025-08-06T12:45:49.959Z"}
{"parentUuid":"f2b15874-a804-4eaf-a330-fd693938719d","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_019DEHP31uQTPwrJdMAhVjD9","type":"tool_result","content":"[master ae1535d] Add Excel export functionality with Italian instructions\n 3 files changed, 445 insertions(+)\n create mode 100644 Istruzioni_Grafici_Excel.md\n create mode 100644 chart_data_for_excel.xlsx\n create mode 100644 create_excel_data.py","is_error":false}]},"uuid":"e92ff206-b4bc-4c1c-88c3-1bf3d075c340","timestamp":"2025-08-06T12:45:52.606Z","toolUseResult":{"stdout":"[master ae1535d] Add Excel export functionality with Italian instructions\n 3 files changed, 445 insertions(+)\n create mode 100644 Istruzioni_Grafici_Excel.md\n create mode 100644 chart_data_for_excel.xlsx\n create mode 100644 create_excel_data.py\r","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"e92ff206-b4bc-4c1c-88c3-1bf3d075c340","isSidechain":false,"userType":"external","cwd":"C:\\Users\\cg14849\\Projects\\Pharma - Dati export IT-US","sessionId":"e61ebec6-66ff-4b5c-a7ab-b090cfd1ca58","version":"1.0.69","gitBranch":"master","message":{"id":"msg_01JpgKxRCh6aNA6H6RceHkCA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Ho creato:\n\n1. **File Excel**: `chart_data_for_excel.xlsx` con 6 fogli contenenti tutti i dati per ricreare i grafici\n2. **Istruzioni complete in italiano**: `Istruzioni_Grafici_Excel.md` con procedimenti dettagliati per ogni grafico\n\nI fogli Excel includono:\n- **Foglio 1**: Dati timeline indicizzati al 2016 (USA vs Mondo)\n- **Foglio 2**: Dati evoluzione quota di mercato USA\n- **Foglio 3**: Dati confronto tassi di crescita annuali\n- **Foglio 4**: Dati timeline multi-settoriale\n- **Foglio 5**: Dati torta quote di mercato per settore\n- **Foglio 6**: Dati performance crescita settoriale\n\nLe istruzioni includono formattazione esatta, colori Italia/USA, posizionamento legenda, e tutti i dettagli per ricreare fedelmente ogni grafico in Excel."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":305,"cache_read_input_tokens":41874,"output_tokens":259,"service_tier":"standard"}},"requestId":"req_011CRrUk1rAjZTMrDk1eupfi","type":"assistant","uuid":"f1e162c5-e8c0-4e95-a5f8-9f75d2a38896","timestamp":"2025-08-06T12:45:59.256Z"}
